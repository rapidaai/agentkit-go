// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: provider-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProviderService_GetAllToolProvider_FullMethodName  = "/provider_api.ProviderService/GetAllToolProvider"
	ProviderService_GetAllModelProvider_FullMethodName = "/provider_api.ProviderService/GetAllModelProvider"
)

// ProviderServiceClient is the client API for ProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderServiceClient interface {
	GetAllToolProvider(ctx context.Context, in *GetAllToolProviderRequest, opts ...grpc.CallOption) (*GetAllToolProviderResponse, error)
	GetAllModelProvider(ctx context.Context, in *GetAllModelProviderRequest, opts ...grpc.CallOption) (*GetAllModelProviderResponse, error)
}

type providerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderServiceClient(cc grpc.ClientConnInterface) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) GetAllToolProvider(ctx context.Context, in *GetAllToolProviderRequest, opts ...grpc.CallOption) (*GetAllToolProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllToolProviderResponse)
	err := c.cc.Invoke(ctx, ProviderService_GetAllToolProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) GetAllModelProvider(ctx context.Context, in *GetAllModelProviderRequest, opts ...grpc.CallOption) (*GetAllModelProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllModelProviderResponse)
	err := c.cc.Invoke(ctx, ProviderService_GetAllModelProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServiceServer is the server API for ProviderService service.
// All implementations should embed UnimplementedProviderServiceServer
// for forward compatibility.
type ProviderServiceServer interface {
	GetAllToolProvider(context.Context, *GetAllToolProviderRequest) (*GetAllToolProviderResponse, error)
	GetAllModelProvider(context.Context, *GetAllModelProviderRequest) (*GetAllModelProviderResponse, error)
}

// UnimplementedProviderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderServiceServer struct{}

func (UnimplementedProviderServiceServer) GetAllToolProvider(context.Context, *GetAllToolProviderRequest) (*GetAllToolProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllToolProvider not implemented")
}
func (UnimplementedProviderServiceServer) GetAllModelProvider(context.Context, *GetAllModelProviderRequest) (*GetAllModelProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllModelProvider not implemented")
}
func (UnimplementedProviderServiceServer) testEmbeddedByValue() {}

// UnsafeProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServiceServer will
// result in compilation errors.
type UnsafeProviderServiceServer interface {
	mustEmbedUnimplementedProviderServiceServer()
}

func RegisterProviderServiceServer(s grpc.ServiceRegistrar, srv ProviderServiceServer) {
	// If the following call pancis, it indicates UnimplementedProviderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProviderService_ServiceDesc, srv)
}

func _ProviderService_GetAllToolProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllToolProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).GetAllToolProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_GetAllToolProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).GetAllToolProvider(ctx, req.(*GetAllToolProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_GetAllModelProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllModelProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).GetAllModelProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderService_GetAllModelProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).GetAllModelProvider(ctx, req.(*GetAllModelProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderService_ServiceDesc is the grpc.ServiceDesc for ProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider_api.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllToolProvider",
			Handler:    _ProviderService_GetAllToolProvider_Handler,
		},
		{
			MethodName: "GetAllModelProvider",
			Handler:    _ProviderService_GetAllModelProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider-api.proto",
}

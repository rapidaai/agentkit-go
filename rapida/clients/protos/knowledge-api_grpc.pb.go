// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: knowledge-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KnowledgeService_GetKnowledge_FullMethodName                   = "/knowledge_api.KnowledgeService/GetKnowledge"
	KnowledgeService_GetAllKnowledge_FullMethodName                = "/knowledge_api.KnowledgeService/GetAllKnowledge"
	KnowledgeService_CreateKnowledge_FullMethodName                = "/knowledge_api.KnowledgeService/CreateKnowledge"
	KnowledgeService_CreateKnowledgeTag_FullMethodName             = "/knowledge_api.KnowledgeService/CreateKnowledgeTag"
	KnowledgeService_CreateKnowledgeDocument_FullMethodName        = "/knowledge_api.KnowledgeService/CreateKnowledgeDocument"
	KnowledgeService_GetAllKnowledgeDocument_FullMethodName        = "/knowledge_api.KnowledgeService/GetAllKnowledgeDocument"
	KnowledgeService_GetAllKnowledgeDocumentSegment_FullMethodName = "/knowledge_api.KnowledgeService/GetAllKnowledgeDocumentSegment"
	KnowledgeService_UpdateKnowledgeDetail_FullMethodName          = "/knowledge_api.KnowledgeService/UpdateKnowledgeDetail"
	KnowledgeService_UpdateKnowledgeDocumentSegment_FullMethodName = "/knowledge_api.KnowledgeService/UpdateKnowledgeDocumentSegment"
	KnowledgeService_DeleteKnowledgeDocumentSegment_FullMethodName = "/knowledge_api.KnowledgeService/DeleteKnowledgeDocumentSegment"
	KnowledgeService_GetAllKnowledgeLog_FullMethodName             = "/knowledge_api.KnowledgeService/GetAllKnowledgeLog"
	KnowledgeService_GetKnowledgeLog_FullMethodName                = "/knowledge_api.KnowledgeService/GetKnowledgeLog"
)

// KnowledgeServiceClient is the client API for KnowledgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeServiceClient interface {
	GetKnowledge(ctx context.Context, in *GetKnowledgeRequest, opts ...grpc.CallOption) (*GetKnowledgeResponse, error)
	GetAllKnowledge(ctx context.Context, in *GetAllKnowledgeRequest, opts ...grpc.CallOption) (*GetAllKnowledgeResponse, error)
	CreateKnowledge(ctx context.Context, in *CreateKnowledgeRequest, opts ...grpc.CallOption) (*CreateKnowledgeResponse, error)
	CreateKnowledgeTag(ctx context.Context, in *CreateKnowledgeTagRequest, opts ...grpc.CallOption) (*GetKnowledgeResponse, error)
	CreateKnowledgeDocument(ctx context.Context, in *CreateKnowledgeDocumentRequest, opts ...grpc.CallOption) (*CreateKnowledgeDocumentResponse, error)
	GetAllKnowledgeDocument(ctx context.Context, in *GetAllKnowledgeDocumentRequest, opts ...grpc.CallOption) (*GetAllKnowledgeDocumentResponse, error)
	GetAllKnowledgeDocumentSegment(ctx context.Context, in *GetAllKnowledgeDocumentSegmentRequest, opts ...grpc.CallOption) (*GetAllKnowledgeDocumentSegmentResponse, error)
	UpdateKnowledgeDetail(ctx context.Context, in *UpdateKnowledgeDetailRequest, opts ...grpc.CallOption) (*GetKnowledgeResponse, error)
	UpdateKnowledgeDocumentSegment(ctx context.Context, in *UpdateKnowledgeDocumentSegmentRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	DeleteKnowledgeDocumentSegment(ctx context.Context, in *DeleteKnowledgeDocumentSegmentRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	// knowledge log retrieval log
	GetAllKnowledgeLog(ctx context.Context, in *GetAllKnowledgeLogRequest, opts ...grpc.CallOption) (*GetAllKnowledgeLogResponse, error)
	GetKnowledgeLog(ctx context.Context, in *GetKnowledgeLogRequest, opts ...grpc.CallOption) (*GetKnowledgeLogResponse, error)
}

type knowledgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeServiceClient(cc grpc.ClientConnInterface) KnowledgeServiceClient {
	return &knowledgeServiceClient{cc}
}

func (c *knowledgeServiceClient) GetKnowledge(ctx context.Context, in *GetKnowledgeRequest, opts ...grpc.CallOption) (*GetKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_GetKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) GetAllKnowledge(ctx context.Context, in *GetAllKnowledgeRequest, opts ...grpc.CallOption) (*GetAllKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllKnowledgeResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_GetAllKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) CreateKnowledge(ctx context.Context, in *CreateKnowledgeRequest, opts ...grpc.CallOption) (*CreateKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKnowledgeResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_CreateKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) CreateKnowledgeTag(ctx context.Context, in *CreateKnowledgeTagRequest, opts ...grpc.CallOption) (*GetKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_CreateKnowledgeTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) CreateKnowledgeDocument(ctx context.Context, in *CreateKnowledgeDocumentRequest, opts ...grpc.CallOption) (*CreateKnowledgeDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKnowledgeDocumentResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_CreateKnowledgeDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) GetAllKnowledgeDocument(ctx context.Context, in *GetAllKnowledgeDocumentRequest, opts ...grpc.CallOption) (*GetAllKnowledgeDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllKnowledgeDocumentResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_GetAllKnowledgeDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) GetAllKnowledgeDocumentSegment(ctx context.Context, in *GetAllKnowledgeDocumentSegmentRequest, opts ...grpc.CallOption) (*GetAllKnowledgeDocumentSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllKnowledgeDocumentSegmentResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_GetAllKnowledgeDocumentSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) UpdateKnowledgeDetail(ctx context.Context, in *UpdateKnowledgeDetailRequest, opts ...grpc.CallOption) (*GetKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_UpdateKnowledgeDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) UpdateKnowledgeDocumentSegment(ctx context.Context, in *UpdateKnowledgeDocumentSegmentRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_UpdateKnowledgeDocumentSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) DeleteKnowledgeDocumentSegment(ctx context.Context, in *DeleteKnowledgeDocumentSegmentRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_DeleteKnowledgeDocumentSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) GetAllKnowledgeLog(ctx context.Context, in *GetAllKnowledgeLogRequest, opts ...grpc.CallOption) (*GetAllKnowledgeLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllKnowledgeLogResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_GetAllKnowledgeLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) GetKnowledgeLog(ctx context.Context, in *GetKnowledgeLogRequest, opts ...grpc.CallOption) (*GetKnowledgeLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeLogResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_GetKnowledgeLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeServiceServer is the server API for KnowledgeService service.
// All implementations should embed UnimplementedKnowledgeServiceServer
// for forward compatibility.
type KnowledgeServiceServer interface {
	GetKnowledge(context.Context, *GetKnowledgeRequest) (*GetKnowledgeResponse, error)
	GetAllKnowledge(context.Context, *GetAllKnowledgeRequest) (*GetAllKnowledgeResponse, error)
	CreateKnowledge(context.Context, *CreateKnowledgeRequest) (*CreateKnowledgeResponse, error)
	CreateKnowledgeTag(context.Context, *CreateKnowledgeTagRequest) (*GetKnowledgeResponse, error)
	CreateKnowledgeDocument(context.Context, *CreateKnowledgeDocumentRequest) (*CreateKnowledgeDocumentResponse, error)
	GetAllKnowledgeDocument(context.Context, *GetAllKnowledgeDocumentRequest) (*GetAllKnowledgeDocumentResponse, error)
	GetAllKnowledgeDocumentSegment(context.Context, *GetAllKnowledgeDocumentSegmentRequest) (*GetAllKnowledgeDocumentSegmentResponse, error)
	UpdateKnowledgeDetail(context.Context, *UpdateKnowledgeDetailRequest) (*GetKnowledgeResponse, error)
	UpdateKnowledgeDocumentSegment(context.Context, *UpdateKnowledgeDocumentSegmentRequest) (*BaseResponse, error)
	DeleteKnowledgeDocumentSegment(context.Context, *DeleteKnowledgeDocumentSegmentRequest) (*BaseResponse, error)
	// knowledge log retrieval log
	GetAllKnowledgeLog(context.Context, *GetAllKnowledgeLogRequest) (*GetAllKnowledgeLogResponse, error)
	GetKnowledgeLog(context.Context, *GetKnowledgeLogRequest) (*GetKnowledgeLogResponse, error)
}

// UnimplementedKnowledgeServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKnowledgeServiceServer struct{}

func (UnimplementedKnowledgeServiceServer) GetKnowledge(context.Context, *GetKnowledgeRequest) (*GetKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledge not implemented")
}
func (UnimplementedKnowledgeServiceServer) GetAllKnowledge(context.Context, *GetAllKnowledgeRequest) (*GetAllKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllKnowledge not implemented")
}
func (UnimplementedKnowledgeServiceServer) CreateKnowledge(context.Context, *CreateKnowledgeRequest) (*CreateKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledge not implemented")
}
func (UnimplementedKnowledgeServiceServer) CreateKnowledgeTag(context.Context, *CreateKnowledgeTagRequest) (*GetKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeTag not implemented")
}
func (UnimplementedKnowledgeServiceServer) CreateKnowledgeDocument(context.Context, *CreateKnowledgeDocumentRequest) (*CreateKnowledgeDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeDocument not implemented")
}
func (UnimplementedKnowledgeServiceServer) GetAllKnowledgeDocument(context.Context, *GetAllKnowledgeDocumentRequest) (*GetAllKnowledgeDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllKnowledgeDocument not implemented")
}
func (UnimplementedKnowledgeServiceServer) GetAllKnowledgeDocumentSegment(context.Context, *GetAllKnowledgeDocumentSegmentRequest) (*GetAllKnowledgeDocumentSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllKnowledgeDocumentSegment not implemented")
}
func (UnimplementedKnowledgeServiceServer) UpdateKnowledgeDetail(context.Context, *UpdateKnowledgeDetailRequest) (*GetKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeDetail not implemented")
}
func (UnimplementedKnowledgeServiceServer) UpdateKnowledgeDocumentSegment(context.Context, *UpdateKnowledgeDocumentSegmentRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeDocumentSegment not implemented")
}
func (UnimplementedKnowledgeServiceServer) DeleteKnowledgeDocumentSegment(context.Context, *DeleteKnowledgeDocumentSegmentRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledgeDocumentSegment not implemented")
}
func (UnimplementedKnowledgeServiceServer) GetAllKnowledgeLog(context.Context, *GetAllKnowledgeLogRequest) (*GetAllKnowledgeLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllKnowledgeLog not implemented")
}
func (UnimplementedKnowledgeServiceServer) GetKnowledgeLog(context.Context, *GetKnowledgeLogRequest) (*GetKnowledgeLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeLog not implemented")
}
func (UnimplementedKnowledgeServiceServer) testEmbeddedByValue() {}

// UnsafeKnowledgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeServiceServer will
// result in compilation errors.
type UnsafeKnowledgeServiceServer interface {
	mustEmbedUnimplementedKnowledgeServiceServer()
}

func RegisterKnowledgeServiceServer(s grpc.ServiceRegistrar, srv KnowledgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedKnowledgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KnowledgeService_ServiceDesc, srv)
}

func _KnowledgeService_GetKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).GetKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_GetKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).GetKnowledge(ctx, req.(*GetKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_GetAllKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).GetAllKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_GetAllKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).GetAllKnowledge(ctx, req.(*GetAllKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_CreateKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).CreateKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_CreateKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).CreateKnowledge(ctx, req.(*CreateKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_CreateKnowledgeTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).CreateKnowledgeTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_CreateKnowledgeTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).CreateKnowledgeTag(ctx, req.(*CreateKnowledgeTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_CreateKnowledgeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).CreateKnowledgeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_CreateKnowledgeDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).CreateKnowledgeDocument(ctx, req.(*CreateKnowledgeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_GetAllKnowledgeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllKnowledgeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).GetAllKnowledgeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_GetAllKnowledgeDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).GetAllKnowledgeDocument(ctx, req.(*GetAllKnowledgeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_GetAllKnowledgeDocumentSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllKnowledgeDocumentSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).GetAllKnowledgeDocumentSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_GetAllKnowledgeDocumentSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).GetAllKnowledgeDocumentSegment(ctx, req.(*GetAllKnowledgeDocumentSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_UpdateKnowledgeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).UpdateKnowledgeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_UpdateKnowledgeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).UpdateKnowledgeDetail(ctx, req.(*UpdateKnowledgeDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_UpdateKnowledgeDocumentSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeDocumentSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).UpdateKnowledgeDocumentSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_UpdateKnowledgeDocumentSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).UpdateKnowledgeDocumentSegment(ctx, req.(*UpdateKnowledgeDocumentSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_DeleteKnowledgeDocumentSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnowledgeDocumentSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).DeleteKnowledgeDocumentSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_DeleteKnowledgeDocumentSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).DeleteKnowledgeDocumentSegment(ctx, req.(*DeleteKnowledgeDocumentSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_GetAllKnowledgeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllKnowledgeLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).GetAllKnowledgeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_GetAllKnowledgeLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).GetAllKnowledgeLog(ctx, req.(*GetAllKnowledgeLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_GetKnowledgeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).GetKnowledgeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_GetKnowledgeLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).GetKnowledgeLog(ctx, req.(*GetKnowledgeLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeService_ServiceDesc is the grpc.ServiceDesc for KnowledgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "knowledge_api.KnowledgeService",
	HandlerType: (*KnowledgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKnowledge",
			Handler:    _KnowledgeService_GetKnowledge_Handler,
		},
		{
			MethodName: "GetAllKnowledge",
			Handler:    _KnowledgeService_GetAllKnowledge_Handler,
		},
		{
			MethodName: "CreateKnowledge",
			Handler:    _KnowledgeService_CreateKnowledge_Handler,
		},
		{
			MethodName: "CreateKnowledgeTag",
			Handler:    _KnowledgeService_CreateKnowledgeTag_Handler,
		},
		{
			MethodName: "CreateKnowledgeDocument",
			Handler:    _KnowledgeService_CreateKnowledgeDocument_Handler,
		},
		{
			MethodName: "GetAllKnowledgeDocument",
			Handler:    _KnowledgeService_GetAllKnowledgeDocument_Handler,
		},
		{
			MethodName: "GetAllKnowledgeDocumentSegment",
			Handler:    _KnowledgeService_GetAllKnowledgeDocumentSegment_Handler,
		},
		{
			MethodName: "UpdateKnowledgeDetail",
			Handler:    _KnowledgeService_UpdateKnowledgeDetail_Handler,
		},
		{
			MethodName: "UpdateKnowledgeDocumentSegment",
			Handler:    _KnowledgeService_UpdateKnowledgeDocumentSegment_Handler,
		},
		{
			MethodName: "DeleteKnowledgeDocumentSegment",
			Handler:    _KnowledgeService_DeleteKnowledgeDocumentSegment_Handler,
		},
		{
			MethodName: "GetAllKnowledgeLog",
			Handler:    _KnowledgeService_GetAllKnowledgeLog_Handler,
		},
		{
			MethodName: "GetKnowledgeLog",
			Handler:    _KnowledgeService_GetKnowledgeLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "knowledge-api.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: connect-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectService_KnowledgeConnect_FullMethodName  = "/connect_api.ConnectService/KnowledgeConnect"
	ConnectService_GeneralConnect_FullMethodName    = "/connect_api.ConnectService/GeneralConnect"
	ConnectService_ActionConnect_FullMethodName     = "/connect_api.ConnectService/ActionConnect"
	ConnectService_GetConnectorFiles_FullMethodName = "/connect_api.ConnectService/GetConnectorFiles"
)

// ConnectServiceClient is the client API for ConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectServiceClient interface {
	KnowledgeConnect(ctx context.Context, in *KnowledgeConnectRequest, opts ...grpc.CallOption) (*KnowledgeConnectResponse, error)
	GeneralConnect(ctx context.Context, in *GeneralConnectRequest, opts ...grpc.CallOption) (*GeneralConnectResponse, error)
	ActionConnect(ctx context.Context, in *ActionConnectRequest, opts ...grpc.CallOption) (*ActionConnectResponse, error)
	GetConnectorFiles(ctx context.Context, in *GetConnectorFilesRequest, opts ...grpc.CallOption) (*GetConnectorFilesResponse, error)
}

type connectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectServiceClient(cc grpc.ClientConnInterface) ConnectServiceClient {
	return &connectServiceClient{cc}
}

func (c *connectServiceClient) KnowledgeConnect(ctx context.Context, in *KnowledgeConnectRequest, opts ...grpc.CallOption) (*KnowledgeConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnowledgeConnectResponse)
	err := c.cc.Invoke(ctx, ConnectService_KnowledgeConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) GeneralConnect(ctx context.Context, in *GeneralConnectRequest, opts ...grpc.CallOption) (*GeneralConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralConnectResponse)
	err := c.cc.Invoke(ctx, ConnectService_GeneralConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) ActionConnect(ctx context.Context, in *ActionConnectRequest, opts ...grpc.CallOption) (*ActionConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionConnectResponse)
	err := c.cc.Invoke(ctx, ConnectService_ActionConnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectServiceClient) GetConnectorFiles(ctx context.Context, in *GetConnectorFilesRequest, opts ...grpc.CallOption) (*GetConnectorFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectorFilesResponse)
	err := c.cc.Invoke(ctx, ConnectService_GetConnectorFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectServiceServer is the server API for ConnectService service.
// All implementations should embed UnimplementedConnectServiceServer
// for forward compatibility.
type ConnectServiceServer interface {
	KnowledgeConnect(context.Context, *KnowledgeConnectRequest) (*KnowledgeConnectResponse, error)
	GeneralConnect(context.Context, *GeneralConnectRequest) (*GeneralConnectResponse, error)
	ActionConnect(context.Context, *ActionConnectRequest) (*ActionConnectResponse, error)
	GetConnectorFiles(context.Context, *GetConnectorFilesRequest) (*GetConnectorFilesResponse, error)
}

// UnimplementedConnectServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectServiceServer struct{}

func (UnimplementedConnectServiceServer) KnowledgeConnect(context.Context, *KnowledgeConnectRequest) (*KnowledgeConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KnowledgeConnect not implemented")
}
func (UnimplementedConnectServiceServer) GeneralConnect(context.Context, *GeneralConnectRequest) (*GeneralConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralConnect not implemented")
}
func (UnimplementedConnectServiceServer) ActionConnect(context.Context, *ActionConnectRequest) (*ActionConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionConnect not implemented")
}
func (UnimplementedConnectServiceServer) GetConnectorFiles(context.Context, *GetConnectorFilesRequest) (*GetConnectorFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorFiles not implemented")
}
func (UnimplementedConnectServiceServer) testEmbeddedByValue() {}

// UnsafeConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServiceServer will
// result in compilation errors.
type UnsafeConnectServiceServer interface {
	mustEmbedUnimplementedConnectServiceServer()
}

func RegisterConnectServiceServer(s grpc.ServiceRegistrar, srv ConnectServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectService_ServiceDesc, srv)
}

func _ConnectService_KnowledgeConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).KnowledgeConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectService_KnowledgeConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).KnowledgeConnect(ctx, req.(*KnowledgeConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_GeneralConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).GeneralConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectService_GeneralConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).GeneralConnect(ctx, req.(*GeneralConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_ActionConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).ActionConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectService_ActionConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).ActionConnect(ctx, req.(*ActionConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectService_GetConnectorFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServiceServer).GetConnectorFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectService_GetConnectorFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServiceServer).GetConnectorFiles(ctx, req.(*GetConnectorFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectService_ServiceDesc is the grpc.ServiceDesc for ConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connect_api.ConnectService",
	HandlerType: (*ConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KnowledgeConnect",
			Handler:    _ConnectService_KnowledgeConnect_Handler,
		},
		{
			MethodName: "GeneralConnect",
			Handler:    _ConnectService_GeneralConnect_Handler,
		},
		{
			MethodName: "ActionConnect",
			Handler:    _ConnectService_ActionConnect_Handler,
		},
		{
			MethodName: "GetConnectorFiles",
			Handler:    _ConnectService_GetConnectorFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect-api.proto",
}

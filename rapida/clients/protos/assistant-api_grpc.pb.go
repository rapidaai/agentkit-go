// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: assistant-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssistantService_GetAssistant_FullMethodName                = "/assistant_api.AssistantService/GetAssistant"
	AssistantService_GetAllAssistant_FullMethodName             = "/assistant_api.AssistantService/GetAllAssistant"
	AssistantService_CreateAssistant_FullMethodName             = "/assistant_api.AssistantService/CreateAssistant"
	AssistantService_DeleteAssistant_FullMethodName             = "/assistant_api.AssistantService/DeleteAssistant"
	AssistantService_GetAllAssistantProvider_FullMethodName     = "/assistant_api.AssistantService/GetAllAssistantProvider"
	AssistantService_CreateAssistantProvider_FullMethodName     = "/assistant_api.AssistantService/CreateAssistantProvider"
	AssistantService_CreateAssistantTag_FullMethodName          = "/assistant_api.AssistantService/CreateAssistantTag"
	AssistantService_UpdateAssistantVersion_FullMethodName      = "/assistant_api.AssistantService/UpdateAssistantVersion"
	AssistantService_UpdateAssistantDetail_FullMethodName       = "/assistant_api.AssistantService/UpdateAssistantDetail"
	AssistantService_GetAllAssistantMessage_FullMethodName      = "/assistant_api.AssistantService/GetAllAssistantMessage"
	AssistantService_GetAllConversationMessage_FullMethodName   = "/assistant_api.AssistantService/GetAllConversationMessage"
	AssistantService_GetAllMessage_FullMethodName               = "/assistant_api.AssistantService/GetAllMessage"
	AssistantService_GetAllAssistantTelemetry_FullMethodName    = "/assistant_api.AssistantService/GetAllAssistantTelemetry"
	AssistantService_GetAllAssistantConversation_FullMethodName = "/assistant_api.AssistantService/GetAllAssistantConversation"
	AssistantService_GetAssistantConversation_FullMethodName    = "/assistant_api.AssistantService/GetAssistantConversation"
	AssistantService_GetAssistantWebhookLog_FullMethodName      = "/assistant_api.AssistantService/GetAssistantWebhookLog"
	AssistantService_GetAllAssistantWebhookLog_FullMethodName   = "/assistant_api.AssistantService/GetAllAssistantWebhookLog"
	AssistantService_GetAllAssistantWebhook_FullMethodName      = "/assistant_api.AssistantService/GetAllAssistantWebhook"
	AssistantService_GetAssistantWebhook_FullMethodName         = "/assistant_api.AssistantService/GetAssistantWebhook"
	AssistantService_CreateAssistantWebhook_FullMethodName      = "/assistant_api.AssistantService/CreateAssistantWebhook"
	AssistantService_UpdateAssistantWebhook_FullMethodName      = "/assistant_api.AssistantService/UpdateAssistantWebhook"
	AssistantService_DeleteAssistantWebhook_FullMethodName      = "/assistant_api.AssistantService/DeleteAssistantWebhook"
	AssistantService_GetAssistantToolLog_FullMethodName         = "/assistant_api.AssistantService/GetAssistantToolLog"
	AssistantService_GetAllAssistantToolLog_FullMethodName      = "/assistant_api.AssistantService/GetAllAssistantToolLog"
	AssistantService_GetAssistantAnalysis_FullMethodName        = "/assistant_api.AssistantService/GetAssistantAnalysis"
	AssistantService_UpdateAssistantAnalysis_FullMethodName     = "/assistant_api.AssistantService/UpdateAssistantAnalysis"
	AssistantService_CreateAssistantAnalysis_FullMethodName     = "/assistant_api.AssistantService/CreateAssistantAnalysis"
	AssistantService_DeleteAssistantAnalysis_FullMethodName     = "/assistant_api.AssistantService/DeleteAssistantAnalysis"
	AssistantService_GetAllAssistantAnalysis_FullMethodName     = "/assistant_api.AssistantService/GetAllAssistantAnalysis"
	AssistantService_CreateAssistantTool_FullMethodName         = "/assistant_api.AssistantService/CreateAssistantTool"
	AssistantService_GetAssistantTool_FullMethodName            = "/assistant_api.AssistantService/GetAssistantTool"
	AssistantService_GetAllAssistantTool_FullMethodName         = "/assistant_api.AssistantService/GetAllAssistantTool"
	AssistantService_DeleteAssistantTool_FullMethodName         = "/assistant_api.AssistantService/DeleteAssistantTool"
	AssistantService_UpdateAssistantTool_FullMethodName         = "/assistant_api.AssistantService/UpdateAssistantTool"
	AssistantService_CreateAssistantKnowledge_FullMethodName    = "/assistant_api.AssistantService/CreateAssistantKnowledge"
	AssistantService_GetAssistantKnowledge_FullMethodName       = "/assistant_api.AssistantService/GetAssistantKnowledge"
	AssistantService_GetAllAssistantKnowledge_FullMethodName    = "/assistant_api.AssistantService/GetAllAssistantKnowledge"
	AssistantService_DeleteAssistantKnowledge_FullMethodName    = "/assistant_api.AssistantService/DeleteAssistantKnowledge"
	AssistantService_UpdateAssistantKnowledge_FullMethodName    = "/assistant_api.AssistantService/UpdateAssistantKnowledge"
)

// AssistantServiceClient is the client API for AssistantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssistantServiceClient interface {
	GetAssistant(ctx context.Context, in *GetAssistantRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error)
	GetAllAssistant(ctx context.Context, in *GetAllAssistantRequest, opts ...grpc.CallOption) (*GetAllAssistantResponse, error)
	CreateAssistant(ctx context.Context, in *CreateAssistantRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error)
	DeleteAssistant(ctx context.Context, in *DeleteAssistantRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error)
	GetAllAssistantProvider(ctx context.Context, in *GetAllAssistantProviderRequest, opts ...grpc.CallOption) (*GetAllAssistantProviderResponse, error)
	CreateAssistantProvider(ctx context.Context, in *CreateAssistantProviderRequest, opts ...grpc.CallOption) (*GetAssistantProviderResponse, error)
	CreateAssistantTag(ctx context.Context, in *CreateAssistantTagRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error)
	UpdateAssistantVersion(ctx context.Context, in *UpdateAssistantVersionRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error)
	UpdateAssistantDetail(ctx context.Context, in *UpdateAssistantDetailRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error)
	GetAllAssistantMessage(ctx context.Context, in *GetAllAssistantMessageRequest, opts ...grpc.CallOption) (*GetAllAssistantMessageResponse, error)
	GetAllConversationMessage(ctx context.Context, in *GetAllConversationMessageRequest, opts ...grpc.CallOption) (*GetAllConversationMessageResponse, error)
	GetAllMessage(ctx context.Context, in *GetAllMessageRequest, opts ...grpc.CallOption) (*GetAllMessageResponse, error)
	GetAllAssistantTelemetry(ctx context.Context, in *GetAllAssistantTelemetryRequest, opts ...grpc.CallOption) (*GetAllAssistantTelemetryResponse, error)
	GetAllAssistantConversation(ctx context.Context, in *GetAllAssistantConversationRequest, opts ...grpc.CallOption) (*GetAllAssistantConversationResponse, error)
	GetAssistantConversation(ctx context.Context, in *GetAssistantConversationRequest, opts ...grpc.CallOption) (*GetAssistantConversationResponse, error)
	// webhook log
	GetAssistantWebhookLog(ctx context.Context, in *GetAssistantWebhookLogRequest, opts ...grpc.CallOption) (*GetAssistantWebhookLogResponse, error)
	GetAllAssistantWebhookLog(ctx context.Context, in *GetAllAssistantWebhookLogRequest, opts ...grpc.CallOption) (*GetAllAssistantWebhookLogResponse, error)
	GetAllAssistantWebhook(ctx context.Context, in *GetAllAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAllAssistantWebhookResponse, error)
	GetAssistantWebhook(ctx context.Context, in *GetAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAssistantWebhookResponse, error)
	CreateAssistantWebhook(ctx context.Context, in *CreateAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAssistantWebhookResponse, error)
	UpdateAssistantWebhook(ctx context.Context, in *UpdateAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAssistantWebhookResponse, error)
	DeleteAssistantWebhook(ctx context.Context, in *DeleteAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAssistantWebhookResponse, error)
	// tool log
	GetAssistantToolLog(ctx context.Context, in *GetAssistantToolLogRequest, opts ...grpc.CallOption) (*GetAssistantToolLogResponse, error)
	GetAllAssistantToolLog(ctx context.Context, in *GetAllAssistantToolLogRequest, opts ...grpc.CallOption) (*GetAllAssistantToolLogResponse, error)
	// analysis
	GetAssistantAnalysis(ctx context.Context, in *GetAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAssistantAnalysisResponse, error)
	UpdateAssistantAnalysis(ctx context.Context, in *UpdateAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAssistantAnalysisResponse, error)
	CreateAssistantAnalysis(ctx context.Context, in *CreateAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAssistantAnalysisResponse, error)
	DeleteAssistantAnalysis(ctx context.Context, in *DeleteAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAssistantAnalysisResponse, error)
	GetAllAssistantAnalysis(ctx context.Context, in *GetAllAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAllAssistantAnalysisResponse, error)
	// assistant tool
	CreateAssistantTool(ctx context.Context, in *CreateAssistantToolRequest, opts ...grpc.CallOption) (*GetAssistantToolResponse, error)
	GetAssistantTool(ctx context.Context, in *GetAssistantToolRequest, opts ...grpc.CallOption) (*GetAssistantToolResponse, error)
	GetAllAssistantTool(ctx context.Context, in *GetAllAssistantToolRequest, opts ...grpc.CallOption) (*GetAllAssistantToolResponse, error)
	DeleteAssistantTool(ctx context.Context, in *DeleteAssistantToolRequest, opts ...grpc.CallOption) (*GetAssistantToolResponse, error)
	UpdateAssistantTool(ctx context.Context, in *UpdateAssistantToolRequest, opts ...grpc.CallOption) (*GetAssistantToolResponse, error)
	// //   next gen
	CreateAssistantKnowledge(ctx context.Context, in *CreateAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAssistantKnowledgeResponse, error)
	GetAssistantKnowledge(ctx context.Context, in *GetAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAssistantKnowledgeResponse, error)
	GetAllAssistantKnowledge(ctx context.Context, in *GetAllAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAllAssistantKnowledgeResponse, error)
	DeleteAssistantKnowledge(ctx context.Context, in *DeleteAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAssistantKnowledgeResponse, error)
	UpdateAssistantKnowledge(ctx context.Context, in *UpdateAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAssistantKnowledgeResponse, error)
}

type assistantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantServiceClient(cc grpc.ClientConnInterface) AssistantServiceClient {
	return &assistantServiceClient{cc}
}

func (c *assistantServiceClient) GetAssistant(ctx context.Context, in *GetAssistantRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistant(ctx context.Context, in *GetAllAssistantRequest, opts ...grpc.CallOption) (*GetAllAssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) CreateAssistant(ctx context.Context, in *CreateAssistantRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantResponse)
	err := c.cc.Invoke(ctx, AssistantService_CreateAssistant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) DeleteAssistant(ctx context.Context, in *DeleteAssistantRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantResponse)
	err := c.cc.Invoke(ctx, AssistantService_DeleteAssistant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantProvider(ctx context.Context, in *GetAllAssistantProviderRequest, opts ...grpc.CallOption) (*GetAllAssistantProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantProviderResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) CreateAssistantProvider(ctx context.Context, in *CreateAssistantProviderRequest, opts ...grpc.CallOption) (*GetAssistantProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantProviderResponse)
	err := c.cc.Invoke(ctx, AssistantService_CreateAssistantProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) CreateAssistantTag(ctx context.Context, in *CreateAssistantTagRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantResponse)
	err := c.cc.Invoke(ctx, AssistantService_CreateAssistantTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) UpdateAssistantVersion(ctx context.Context, in *UpdateAssistantVersionRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantResponse)
	err := c.cc.Invoke(ctx, AssistantService_UpdateAssistantVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) UpdateAssistantDetail(ctx context.Context, in *UpdateAssistantDetailRequest, opts ...grpc.CallOption) (*GetAssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantResponse)
	err := c.cc.Invoke(ctx, AssistantService_UpdateAssistantDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantMessage(ctx context.Context, in *GetAllAssistantMessageRequest, opts ...grpc.CallOption) (*GetAllAssistantMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantMessageResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllConversationMessage(ctx context.Context, in *GetAllConversationMessageRequest, opts ...grpc.CallOption) (*GetAllConversationMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllConversationMessageResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllConversationMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllMessage(ctx context.Context, in *GetAllMessageRequest, opts ...grpc.CallOption) (*GetAllMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMessageResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantTelemetry(ctx context.Context, in *GetAllAssistantTelemetryRequest, opts ...grpc.CallOption) (*GetAllAssistantTelemetryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantTelemetryResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantTelemetry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantConversation(ctx context.Context, in *GetAllAssistantConversationRequest, opts ...grpc.CallOption) (*GetAllAssistantConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantConversationResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantConversation(ctx context.Context, in *GetAssistantConversationRequest, opts ...grpc.CallOption) (*GetAssistantConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantConversationResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantWebhookLog(ctx context.Context, in *GetAssistantWebhookLogRequest, opts ...grpc.CallOption) (*GetAssistantWebhookLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantWebhookLogResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantWebhookLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantWebhookLog(ctx context.Context, in *GetAllAssistantWebhookLogRequest, opts ...grpc.CallOption) (*GetAllAssistantWebhookLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantWebhookLogResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantWebhookLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantWebhook(ctx context.Context, in *GetAllAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAllAssistantWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantWebhookResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantWebhook(ctx context.Context, in *GetAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAssistantWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantWebhookResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) CreateAssistantWebhook(ctx context.Context, in *CreateAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAssistantWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantWebhookResponse)
	err := c.cc.Invoke(ctx, AssistantService_CreateAssistantWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) UpdateAssistantWebhook(ctx context.Context, in *UpdateAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAssistantWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantWebhookResponse)
	err := c.cc.Invoke(ctx, AssistantService_UpdateAssistantWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) DeleteAssistantWebhook(ctx context.Context, in *DeleteAssistantWebhookRequest, opts ...grpc.CallOption) (*GetAssistantWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantWebhookResponse)
	err := c.cc.Invoke(ctx, AssistantService_DeleteAssistantWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantToolLog(ctx context.Context, in *GetAssistantToolLogRequest, opts ...grpc.CallOption) (*GetAssistantToolLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantToolLogResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantToolLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantToolLog(ctx context.Context, in *GetAllAssistantToolLogRequest, opts ...grpc.CallOption) (*GetAllAssistantToolLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantToolLogResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantToolLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantAnalysis(ctx context.Context, in *GetAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAssistantAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantAnalysisResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) UpdateAssistantAnalysis(ctx context.Context, in *UpdateAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAssistantAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantAnalysisResponse)
	err := c.cc.Invoke(ctx, AssistantService_UpdateAssistantAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) CreateAssistantAnalysis(ctx context.Context, in *CreateAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAssistantAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantAnalysisResponse)
	err := c.cc.Invoke(ctx, AssistantService_CreateAssistantAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) DeleteAssistantAnalysis(ctx context.Context, in *DeleteAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAssistantAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantAnalysisResponse)
	err := c.cc.Invoke(ctx, AssistantService_DeleteAssistantAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantAnalysis(ctx context.Context, in *GetAllAssistantAnalysisRequest, opts ...grpc.CallOption) (*GetAllAssistantAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantAnalysisResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) CreateAssistantTool(ctx context.Context, in *CreateAssistantToolRequest, opts ...grpc.CallOption) (*GetAssistantToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantToolResponse)
	err := c.cc.Invoke(ctx, AssistantService_CreateAssistantTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantTool(ctx context.Context, in *GetAssistantToolRequest, opts ...grpc.CallOption) (*GetAssistantToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantToolResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantTool(ctx context.Context, in *GetAllAssistantToolRequest, opts ...grpc.CallOption) (*GetAllAssistantToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantToolResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) DeleteAssistantTool(ctx context.Context, in *DeleteAssistantToolRequest, opts ...grpc.CallOption) (*GetAssistantToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantToolResponse)
	err := c.cc.Invoke(ctx, AssistantService_DeleteAssistantTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) UpdateAssistantTool(ctx context.Context, in *UpdateAssistantToolRequest, opts ...grpc.CallOption) (*GetAssistantToolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantToolResponse)
	err := c.cc.Invoke(ctx, AssistantService_UpdateAssistantTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) CreateAssistantKnowledge(ctx context.Context, in *CreateAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAssistantKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantKnowledgeResponse)
	err := c.cc.Invoke(ctx, AssistantService_CreateAssistantKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAssistantKnowledge(ctx context.Context, in *GetAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAssistantKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantKnowledgeResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAssistantKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) GetAllAssistantKnowledge(ctx context.Context, in *GetAllAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAllAssistantKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantKnowledgeResponse)
	err := c.cc.Invoke(ctx, AssistantService_GetAllAssistantKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) DeleteAssistantKnowledge(ctx context.Context, in *DeleteAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAssistantKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantKnowledgeResponse)
	err := c.cc.Invoke(ctx, AssistantService_DeleteAssistantKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assistantServiceClient) UpdateAssistantKnowledge(ctx context.Context, in *UpdateAssistantKnowledgeRequest, opts ...grpc.CallOption) (*GetAssistantKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssistantKnowledgeResponse)
	err := c.cc.Invoke(ctx, AssistantService_UpdateAssistantKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssistantServiceServer is the server API for AssistantService service.
// All implementations should embed UnimplementedAssistantServiceServer
// for forward compatibility.
type AssistantServiceServer interface {
	GetAssistant(context.Context, *GetAssistantRequest) (*GetAssistantResponse, error)
	GetAllAssistant(context.Context, *GetAllAssistantRequest) (*GetAllAssistantResponse, error)
	CreateAssistant(context.Context, *CreateAssistantRequest) (*GetAssistantResponse, error)
	DeleteAssistant(context.Context, *DeleteAssistantRequest) (*GetAssistantResponse, error)
	GetAllAssistantProvider(context.Context, *GetAllAssistantProviderRequest) (*GetAllAssistantProviderResponse, error)
	CreateAssistantProvider(context.Context, *CreateAssistantProviderRequest) (*GetAssistantProviderResponse, error)
	CreateAssistantTag(context.Context, *CreateAssistantTagRequest) (*GetAssistantResponse, error)
	UpdateAssistantVersion(context.Context, *UpdateAssistantVersionRequest) (*GetAssistantResponse, error)
	UpdateAssistantDetail(context.Context, *UpdateAssistantDetailRequest) (*GetAssistantResponse, error)
	GetAllAssistantMessage(context.Context, *GetAllAssistantMessageRequest) (*GetAllAssistantMessageResponse, error)
	GetAllConversationMessage(context.Context, *GetAllConversationMessageRequest) (*GetAllConversationMessageResponse, error)
	GetAllMessage(context.Context, *GetAllMessageRequest) (*GetAllMessageResponse, error)
	GetAllAssistantTelemetry(context.Context, *GetAllAssistantTelemetryRequest) (*GetAllAssistantTelemetryResponse, error)
	GetAllAssistantConversation(context.Context, *GetAllAssistantConversationRequest) (*GetAllAssistantConversationResponse, error)
	GetAssistantConversation(context.Context, *GetAssistantConversationRequest) (*GetAssistantConversationResponse, error)
	// webhook log
	GetAssistantWebhookLog(context.Context, *GetAssistantWebhookLogRequest) (*GetAssistantWebhookLogResponse, error)
	GetAllAssistantWebhookLog(context.Context, *GetAllAssistantWebhookLogRequest) (*GetAllAssistantWebhookLogResponse, error)
	GetAllAssistantWebhook(context.Context, *GetAllAssistantWebhookRequest) (*GetAllAssistantWebhookResponse, error)
	GetAssistantWebhook(context.Context, *GetAssistantWebhookRequest) (*GetAssistantWebhookResponse, error)
	CreateAssistantWebhook(context.Context, *CreateAssistantWebhookRequest) (*GetAssistantWebhookResponse, error)
	UpdateAssistantWebhook(context.Context, *UpdateAssistantWebhookRequest) (*GetAssistantWebhookResponse, error)
	DeleteAssistantWebhook(context.Context, *DeleteAssistantWebhookRequest) (*GetAssistantWebhookResponse, error)
	// tool log
	GetAssistantToolLog(context.Context, *GetAssistantToolLogRequest) (*GetAssistantToolLogResponse, error)
	GetAllAssistantToolLog(context.Context, *GetAllAssistantToolLogRequest) (*GetAllAssistantToolLogResponse, error)
	// analysis
	GetAssistantAnalysis(context.Context, *GetAssistantAnalysisRequest) (*GetAssistantAnalysisResponse, error)
	UpdateAssistantAnalysis(context.Context, *UpdateAssistantAnalysisRequest) (*GetAssistantAnalysisResponse, error)
	CreateAssistantAnalysis(context.Context, *CreateAssistantAnalysisRequest) (*GetAssistantAnalysisResponse, error)
	DeleteAssistantAnalysis(context.Context, *DeleteAssistantAnalysisRequest) (*GetAssistantAnalysisResponse, error)
	GetAllAssistantAnalysis(context.Context, *GetAllAssistantAnalysisRequest) (*GetAllAssistantAnalysisResponse, error)
	// assistant tool
	CreateAssistantTool(context.Context, *CreateAssistantToolRequest) (*GetAssistantToolResponse, error)
	GetAssistantTool(context.Context, *GetAssistantToolRequest) (*GetAssistantToolResponse, error)
	GetAllAssistantTool(context.Context, *GetAllAssistantToolRequest) (*GetAllAssistantToolResponse, error)
	DeleteAssistantTool(context.Context, *DeleteAssistantToolRequest) (*GetAssistantToolResponse, error)
	UpdateAssistantTool(context.Context, *UpdateAssistantToolRequest) (*GetAssistantToolResponse, error)
	// //   next gen
	CreateAssistantKnowledge(context.Context, *CreateAssistantKnowledgeRequest) (*GetAssistantKnowledgeResponse, error)
	GetAssistantKnowledge(context.Context, *GetAssistantKnowledgeRequest) (*GetAssistantKnowledgeResponse, error)
	GetAllAssistantKnowledge(context.Context, *GetAllAssistantKnowledgeRequest) (*GetAllAssistantKnowledgeResponse, error)
	DeleteAssistantKnowledge(context.Context, *DeleteAssistantKnowledgeRequest) (*GetAssistantKnowledgeResponse, error)
	UpdateAssistantKnowledge(context.Context, *UpdateAssistantKnowledgeRequest) (*GetAssistantKnowledgeResponse, error)
}

// UnimplementedAssistantServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssistantServiceServer struct{}

func (UnimplementedAssistantServiceServer) GetAssistant(context.Context, *GetAssistantRequest) (*GetAssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistant not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistant(context.Context, *GetAllAssistantRequest) (*GetAllAssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistant not implemented")
}
func (UnimplementedAssistantServiceServer) CreateAssistant(context.Context, *CreateAssistantRequest) (*GetAssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssistant not implemented")
}
func (UnimplementedAssistantServiceServer) DeleteAssistant(context.Context, *DeleteAssistantRequest) (*GetAssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssistant not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantProvider(context.Context, *GetAllAssistantProviderRequest) (*GetAllAssistantProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantProvider not implemented")
}
func (UnimplementedAssistantServiceServer) CreateAssistantProvider(context.Context, *CreateAssistantProviderRequest) (*GetAssistantProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssistantProvider not implemented")
}
func (UnimplementedAssistantServiceServer) CreateAssistantTag(context.Context, *CreateAssistantTagRequest) (*GetAssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssistantTag not implemented")
}
func (UnimplementedAssistantServiceServer) UpdateAssistantVersion(context.Context, *UpdateAssistantVersionRequest) (*GetAssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssistantVersion not implemented")
}
func (UnimplementedAssistantServiceServer) UpdateAssistantDetail(context.Context, *UpdateAssistantDetailRequest) (*GetAssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssistantDetail not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantMessage(context.Context, *GetAllAssistantMessageRequest) (*GetAllAssistantMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantMessage not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllConversationMessage(context.Context, *GetAllConversationMessageRequest) (*GetAllConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConversationMessage not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllMessage(context.Context, *GetAllMessageRequest) (*GetAllMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMessage not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantTelemetry(context.Context, *GetAllAssistantTelemetryRequest) (*GetAllAssistantTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantTelemetry not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantConversation(context.Context, *GetAllAssistantConversationRequest) (*GetAllAssistantConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantConversation not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantConversation(context.Context, *GetAssistantConversationRequest) (*GetAssistantConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantConversation not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantWebhookLog(context.Context, *GetAssistantWebhookLogRequest) (*GetAssistantWebhookLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantWebhookLog not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantWebhookLog(context.Context, *GetAllAssistantWebhookLogRequest) (*GetAllAssistantWebhookLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantWebhookLog not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantWebhook(context.Context, *GetAllAssistantWebhookRequest) (*GetAllAssistantWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantWebhook not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantWebhook(context.Context, *GetAssistantWebhookRequest) (*GetAssistantWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantWebhook not implemented")
}
func (UnimplementedAssistantServiceServer) CreateAssistantWebhook(context.Context, *CreateAssistantWebhookRequest) (*GetAssistantWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssistantWebhook not implemented")
}
func (UnimplementedAssistantServiceServer) UpdateAssistantWebhook(context.Context, *UpdateAssistantWebhookRequest) (*GetAssistantWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssistantWebhook not implemented")
}
func (UnimplementedAssistantServiceServer) DeleteAssistantWebhook(context.Context, *DeleteAssistantWebhookRequest) (*GetAssistantWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssistantWebhook not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantToolLog(context.Context, *GetAssistantToolLogRequest) (*GetAssistantToolLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantToolLog not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantToolLog(context.Context, *GetAllAssistantToolLogRequest) (*GetAllAssistantToolLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantToolLog not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantAnalysis(context.Context, *GetAssistantAnalysisRequest) (*GetAssistantAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantAnalysis not implemented")
}
func (UnimplementedAssistantServiceServer) UpdateAssistantAnalysis(context.Context, *UpdateAssistantAnalysisRequest) (*GetAssistantAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssistantAnalysis not implemented")
}
func (UnimplementedAssistantServiceServer) CreateAssistantAnalysis(context.Context, *CreateAssistantAnalysisRequest) (*GetAssistantAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssistantAnalysis not implemented")
}
func (UnimplementedAssistantServiceServer) DeleteAssistantAnalysis(context.Context, *DeleteAssistantAnalysisRequest) (*GetAssistantAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssistantAnalysis not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantAnalysis(context.Context, *GetAllAssistantAnalysisRequest) (*GetAllAssistantAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantAnalysis not implemented")
}
func (UnimplementedAssistantServiceServer) CreateAssistantTool(context.Context, *CreateAssistantToolRequest) (*GetAssistantToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssistantTool not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantTool(context.Context, *GetAssistantToolRequest) (*GetAssistantToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantTool not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantTool(context.Context, *GetAllAssistantToolRequest) (*GetAllAssistantToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantTool not implemented")
}
func (UnimplementedAssistantServiceServer) DeleteAssistantTool(context.Context, *DeleteAssistantToolRequest) (*GetAssistantToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssistantTool not implemented")
}
func (UnimplementedAssistantServiceServer) UpdateAssistantTool(context.Context, *UpdateAssistantToolRequest) (*GetAssistantToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssistantTool not implemented")
}
func (UnimplementedAssistantServiceServer) CreateAssistantKnowledge(context.Context, *CreateAssistantKnowledgeRequest) (*GetAssistantKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssistantKnowledge not implemented")
}
func (UnimplementedAssistantServiceServer) GetAssistantKnowledge(context.Context, *GetAssistantKnowledgeRequest) (*GetAssistantKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssistantKnowledge not implemented")
}
func (UnimplementedAssistantServiceServer) GetAllAssistantKnowledge(context.Context, *GetAllAssistantKnowledgeRequest) (*GetAllAssistantKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantKnowledge not implemented")
}
func (UnimplementedAssistantServiceServer) DeleteAssistantKnowledge(context.Context, *DeleteAssistantKnowledgeRequest) (*GetAssistantKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssistantKnowledge not implemented")
}
func (UnimplementedAssistantServiceServer) UpdateAssistantKnowledge(context.Context, *UpdateAssistantKnowledgeRequest) (*GetAssistantKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssistantKnowledge not implemented")
}
func (UnimplementedAssistantServiceServer) testEmbeddedByValue() {}

// UnsafeAssistantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssistantServiceServer will
// result in compilation errors.
type UnsafeAssistantServiceServer interface {
	mustEmbedUnimplementedAssistantServiceServer()
}

func RegisterAssistantServiceServer(s grpc.ServiceRegistrar, srv AssistantServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssistantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssistantService_ServiceDesc, srv)
}

func _AssistantService_GetAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistant(ctx, req.(*GetAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistant(ctx, req.(*GetAllAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_CreateAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).CreateAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_CreateAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).CreateAssistant(ctx, req.(*CreateAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_DeleteAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).DeleteAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_DeleteAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).DeleteAssistant(ctx, req.(*DeleteAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantProvider(ctx, req.(*GetAllAssistantProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_CreateAssistantProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssistantProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).CreateAssistantProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_CreateAssistantProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).CreateAssistantProvider(ctx, req.(*CreateAssistantProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_CreateAssistantTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssistantTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).CreateAssistantTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_CreateAssistantTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).CreateAssistantTag(ctx, req.(*CreateAssistantTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_UpdateAssistantVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssistantVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).UpdateAssistantVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_UpdateAssistantVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).UpdateAssistantVersion(ctx, req.(*UpdateAssistantVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_UpdateAssistantDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssistantDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).UpdateAssistantDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_UpdateAssistantDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).UpdateAssistantDetail(ctx, req.(*UpdateAssistantDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantMessage(ctx, req.(*GetAllAssistantMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllConversationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllConversationMessage(ctx, req.(*GetAllConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllMessage(ctx, req.(*GetAllMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantTelemetry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantTelemetry(ctx, req.(*GetAllAssistantTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantConversation(ctx, req.(*GetAllAssistantConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantConversation(ctx, req.(*GetAssistantConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantWebhookLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantWebhookLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantWebhookLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantWebhookLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantWebhookLog(ctx, req.(*GetAssistantWebhookLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantWebhookLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantWebhookLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantWebhookLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantWebhookLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantWebhookLog(ctx, req.(*GetAllAssistantWebhookLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantWebhook(ctx, req.(*GetAllAssistantWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantWebhook(ctx, req.(*GetAssistantWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_CreateAssistantWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssistantWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).CreateAssistantWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_CreateAssistantWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).CreateAssistantWebhook(ctx, req.(*CreateAssistantWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_UpdateAssistantWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssistantWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).UpdateAssistantWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_UpdateAssistantWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).UpdateAssistantWebhook(ctx, req.(*UpdateAssistantWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_DeleteAssistantWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssistantWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).DeleteAssistantWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_DeleteAssistantWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).DeleteAssistantWebhook(ctx, req.(*DeleteAssistantWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantToolLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantToolLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantToolLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantToolLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantToolLog(ctx, req.(*GetAssistantToolLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantToolLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantToolLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantToolLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantToolLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantToolLog(ctx, req.(*GetAllAssistantToolLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantAnalysis(ctx, req.(*GetAssistantAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_UpdateAssistantAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssistantAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).UpdateAssistantAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_UpdateAssistantAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).UpdateAssistantAnalysis(ctx, req.(*UpdateAssistantAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_CreateAssistantAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssistantAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).CreateAssistantAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_CreateAssistantAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).CreateAssistantAnalysis(ctx, req.(*CreateAssistantAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_DeleteAssistantAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssistantAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).DeleteAssistantAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_DeleteAssistantAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).DeleteAssistantAnalysis(ctx, req.(*DeleteAssistantAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantAnalysis(ctx, req.(*GetAllAssistantAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_CreateAssistantTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssistantToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).CreateAssistantTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_CreateAssistantTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).CreateAssistantTool(ctx, req.(*CreateAssistantToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantTool(ctx, req.(*GetAssistantToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantTool(ctx, req.(*GetAllAssistantToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_DeleteAssistantTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssistantToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).DeleteAssistantTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_DeleteAssistantTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).DeleteAssistantTool(ctx, req.(*DeleteAssistantToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_UpdateAssistantTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssistantToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).UpdateAssistantTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_UpdateAssistantTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).UpdateAssistantTool(ctx, req.(*UpdateAssistantToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_CreateAssistantKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssistantKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).CreateAssistantKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_CreateAssistantKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).CreateAssistantKnowledge(ctx, req.(*CreateAssistantKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAssistantKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssistantKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAssistantKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAssistantKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAssistantKnowledge(ctx, req.(*GetAssistantKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_GetAllAssistantKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).GetAllAssistantKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_GetAllAssistantKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).GetAllAssistantKnowledge(ctx, req.(*GetAllAssistantKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_DeleteAssistantKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssistantKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).DeleteAssistantKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_DeleteAssistantKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).DeleteAssistantKnowledge(ctx, req.(*DeleteAssistantKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssistantService_UpdateAssistantKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssistantKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssistantServiceServer).UpdateAssistantKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssistantService_UpdateAssistantKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssistantServiceServer).UpdateAssistantKnowledge(ctx, req.(*UpdateAssistantKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssistantService_ServiceDesc is the grpc.ServiceDesc for AssistantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssistantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assistant_api.AssistantService",
	HandlerType: (*AssistantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssistant",
			Handler:    _AssistantService_GetAssistant_Handler,
		},
		{
			MethodName: "GetAllAssistant",
			Handler:    _AssistantService_GetAllAssistant_Handler,
		},
		{
			MethodName: "CreateAssistant",
			Handler:    _AssistantService_CreateAssistant_Handler,
		},
		{
			MethodName: "DeleteAssistant",
			Handler:    _AssistantService_DeleteAssistant_Handler,
		},
		{
			MethodName: "GetAllAssistantProvider",
			Handler:    _AssistantService_GetAllAssistantProvider_Handler,
		},
		{
			MethodName: "CreateAssistantProvider",
			Handler:    _AssistantService_CreateAssistantProvider_Handler,
		},
		{
			MethodName: "CreateAssistantTag",
			Handler:    _AssistantService_CreateAssistantTag_Handler,
		},
		{
			MethodName: "UpdateAssistantVersion",
			Handler:    _AssistantService_UpdateAssistantVersion_Handler,
		},
		{
			MethodName: "UpdateAssistantDetail",
			Handler:    _AssistantService_UpdateAssistantDetail_Handler,
		},
		{
			MethodName: "GetAllAssistantMessage",
			Handler:    _AssistantService_GetAllAssistantMessage_Handler,
		},
		{
			MethodName: "GetAllConversationMessage",
			Handler:    _AssistantService_GetAllConversationMessage_Handler,
		},
		{
			MethodName: "GetAllMessage",
			Handler:    _AssistantService_GetAllMessage_Handler,
		},
		{
			MethodName: "GetAllAssistantTelemetry",
			Handler:    _AssistantService_GetAllAssistantTelemetry_Handler,
		},
		{
			MethodName: "GetAllAssistantConversation",
			Handler:    _AssistantService_GetAllAssistantConversation_Handler,
		},
		{
			MethodName: "GetAssistantConversation",
			Handler:    _AssistantService_GetAssistantConversation_Handler,
		},
		{
			MethodName: "GetAssistantWebhookLog",
			Handler:    _AssistantService_GetAssistantWebhookLog_Handler,
		},
		{
			MethodName: "GetAllAssistantWebhookLog",
			Handler:    _AssistantService_GetAllAssistantWebhookLog_Handler,
		},
		{
			MethodName: "GetAllAssistantWebhook",
			Handler:    _AssistantService_GetAllAssistantWebhook_Handler,
		},
		{
			MethodName: "GetAssistantWebhook",
			Handler:    _AssistantService_GetAssistantWebhook_Handler,
		},
		{
			MethodName: "CreateAssistantWebhook",
			Handler:    _AssistantService_CreateAssistantWebhook_Handler,
		},
		{
			MethodName: "UpdateAssistantWebhook",
			Handler:    _AssistantService_UpdateAssistantWebhook_Handler,
		},
		{
			MethodName: "DeleteAssistantWebhook",
			Handler:    _AssistantService_DeleteAssistantWebhook_Handler,
		},
		{
			MethodName: "GetAssistantToolLog",
			Handler:    _AssistantService_GetAssistantToolLog_Handler,
		},
		{
			MethodName: "GetAllAssistantToolLog",
			Handler:    _AssistantService_GetAllAssistantToolLog_Handler,
		},
		{
			MethodName: "GetAssistantAnalysis",
			Handler:    _AssistantService_GetAssistantAnalysis_Handler,
		},
		{
			MethodName: "UpdateAssistantAnalysis",
			Handler:    _AssistantService_UpdateAssistantAnalysis_Handler,
		},
		{
			MethodName: "CreateAssistantAnalysis",
			Handler:    _AssistantService_CreateAssistantAnalysis_Handler,
		},
		{
			MethodName: "DeleteAssistantAnalysis",
			Handler:    _AssistantService_DeleteAssistantAnalysis_Handler,
		},
		{
			MethodName: "GetAllAssistantAnalysis",
			Handler:    _AssistantService_GetAllAssistantAnalysis_Handler,
		},
		{
			MethodName: "CreateAssistantTool",
			Handler:    _AssistantService_CreateAssistantTool_Handler,
		},
		{
			MethodName: "GetAssistantTool",
			Handler:    _AssistantService_GetAssistantTool_Handler,
		},
		{
			MethodName: "GetAllAssistantTool",
			Handler:    _AssistantService_GetAllAssistantTool_Handler,
		},
		{
			MethodName: "DeleteAssistantTool",
			Handler:    _AssistantService_DeleteAssistantTool_Handler,
		},
		{
			MethodName: "UpdateAssistantTool",
			Handler:    _AssistantService_UpdateAssistantTool_Handler,
		},
		{
			MethodName: "CreateAssistantKnowledge",
			Handler:    _AssistantService_CreateAssistantKnowledge_Handler,
		},
		{
			MethodName: "GetAssistantKnowledge",
			Handler:    _AssistantService_GetAssistantKnowledge_Handler,
		},
		{
			MethodName: "GetAllAssistantKnowledge",
			Handler:    _AssistantService_GetAllAssistantKnowledge_Handler,
		},
		{
			MethodName: "DeleteAssistantKnowledge",
			Handler:    _AssistantService_DeleteAssistantKnowledge_Handler,
		},
		{
			MethodName: "UpdateAssistantKnowledge",
			Handler:    _AssistantService_UpdateAssistantKnowledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assistant-api.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: sendgrid-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SendgridService_WelcomeEmail_FullMethodName       = "/integration_api.SendgridService/WelcomeEmail"
	SendgridService_ResetPasswordEmail_FullMethodName = "/integration_api.SendgridService/ResetPasswordEmail"
	SendgridService_InviteMemberEmail_FullMethodName  = "/integration_api.SendgridService/InviteMemberEmail"
)

// SendgridServiceClient is the client API for SendgridService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendgridServiceClient interface {
	WelcomeEmail(ctx context.Context, in *WelcomeEmailRequest, opts ...grpc.CallOption) (*WelcomeEmailResponse, error)
	ResetPasswordEmail(ctx context.Context, in *ResetPasswordEmailRequest, opts ...grpc.CallOption) (*ResetPasswordEmailResponse, error)
	InviteMemberEmail(ctx context.Context, in *InviteMemeberEmailRequest, opts ...grpc.CallOption) (*InviteMemeberEmailResponse, error)
}

type sendgridServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendgridServiceClient(cc grpc.ClientConnInterface) SendgridServiceClient {
	return &sendgridServiceClient{cc}
}

func (c *sendgridServiceClient) WelcomeEmail(ctx context.Context, in *WelcomeEmailRequest, opts ...grpc.CallOption) (*WelcomeEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WelcomeEmailResponse)
	err := c.cc.Invoke(ctx, SendgridService_WelcomeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendgridServiceClient) ResetPasswordEmail(ctx context.Context, in *ResetPasswordEmailRequest, opts ...grpc.CallOption) (*ResetPasswordEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordEmailResponse)
	err := c.cc.Invoke(ctx, SendgridService_ResetPasswordEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendgridServiceClient) InviteMemberEmail(ctx context.Context, in *InviteMemeberEmailRequest, opts ...grpc.CallOption) (*InviteMemeberEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteMemeberEmailResponse)
	err := c.cc.Invoke(ctx, SendgridService_InviteMemberEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendgridServiceServer is the server API for SendgridService service.
// All implementations should embed UnimplementedSendgridServiceServer
// for forward compatibility.
type SendgridServiceServer interface {
	WelcomeEmail(context.Context, *WelcomeEmailRequest) (*WelcomeEmailResponse, error)
	ResetPasswordEmail(context.Context, *ResetPasswordEmailRequest) (*ResetPasswordEmailResponse, error)
	InviteMemberEmail(context.Context, *InviteMemeberEmailRequest) (*InviteMemeberEmailResponse, error)
}

// UnimplementedSendgridServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSendgridServiceServer struct{}

func (UnimplementedSendgridServiceServer) WelcomeEmail(context.Context, *WelcomeEmailRequest) (*WelcomeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeEmail not implemented")
}
func (UnimplementedSendgridServiceServer) ResetPasswordEmail(context.Context, *ResetPasswordEmailRequest) (*ResetPasswordEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordEmail not implemented")
}
func (UnimplementedSendgridServiceServer) InviteMemberEmail(context.Context, *InviteMemeberEmailRequest) (*InviteMemeberEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMemberEmail not implemented")
}
func (UnimplementedSendgridServiceServer) testEmbeddedByValue() {}

// UnsafeSendgridServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendgridServiceServer will
// result in compilation errors.
type UnsafeSendgridServiceServer interface {
	mustEmbedUnimplementedSendgridServiceServer()
}

func RegisterSendgridServiceServer(s grpc.ServiceRegistrar, srv SendgridServiceServer) {
	// If the following call pancis, it indicates UnimplementedSendgridServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SendgridService_ServiceDesc, srv)
}

func _SendgridService_WelcomeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelcomeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendgridServiceServer).WelcomeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendgridService_WelcomeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendgridServiceServer).WelcomeEmail(ctx, req.(*WelcomeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendgridService_ResetPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendgridServiceServer).ResetPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendgridService_ResetPasswordEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendgridServiceServer).ResetPasswordEmail(ctx, req.(*ResetPasswordEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendgridService_InviteMemberEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemeberEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendgridServiceServer).InviteMemberEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendgridService_InviteMemberEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendgridServiceServer).InviteMemberEmail(ctx, req.(*InviteMemeberEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SendgridService_ServiceDesc is the grpc.ServiceDesc for SendgridService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendgridService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration_api.SendgridService",
	HandlerType: (*SendgridServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WelcomeEmail",
			Handler:    _SendgridService_WelcomeEmail_Handler,
		},
		{
			MethodName: "ResetPasswordEmail",
			Handler:    _SendgridService_ResetPasswordEmail_Handler,
		},
		{
			MethodName: "InviteMemberEmail",
			Handler:    _SendgridService_InviteMemberEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sendgrid-api.proto",
}

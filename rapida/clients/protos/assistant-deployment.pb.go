// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: assistant-deployment.proto

package lexatic_backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeploymentAudioProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AudioProvider   string      `protobuf:"bytes,2,opt,name=audioProvider,proto3" json:"audioProvider,omitempty"`
	AudioOptions    []*Metadata `protobuf:"bytes,3,rep,name=audioOptions,proto3" json:"audioOptions,omitempty"`
	AudioProviderId uint64      `protobuf:"varint,4,opt,name=audioProviderId,proto3" json:"audioProviderId,omitempty"`
	Status          string      `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	AudioType       string      `protobuf:"bytes,6,opt,name=audioType,proto3" json:"audioType,omitempty"`
}

func (x *DeploymentAudioProvider) Reset() {
	*x = DeploymentAudioProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentAudioProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentAudioProvider) ProtoMessage() {}

func (x *DeploymentAudioProvider) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentAudioProvider.ProtoReflect.Descriptor instead.
func (*DeploymentAudioProvider) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{0}
}

func (x *DeploymentAudioProvider) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeploymentAudioProvider) GetAudioProvider() string {
	if x != nil {
		return x.AudioProvider
	}
	return ""
}

func (x *DeploymentAudioProvider) GetAudioOptions() []*Metadata {
	if x != nil {
		return x.AudioOptions
	}
	return nil
}

func (x *DeploymentAudioProvider) GetAudioProviderId() uint64 {
	if x != nil {
		return x.AudioProviderId
	}
	return 0
}

func (x *DeploymentAudioProvider) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeploymentAudioProvider) GetAudioType() string {
	if x != nil {
		return x.AudioType
	}
	return ""
}

type AssistantWebpluginDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssistantId uint64                   `protobuf:"varint,5,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Name        string                   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Greeting    *string                  `protobuf:"bytes,10,opt,name=greeting,proto3,oneof" json:"greeting,omitempty"`
	Mistake     *string                  `protobuf:"bytes,11,opt,name=mistake,proto3,oneof" json:"mistake,omitempty"`
	Ending      *string                  `protobuf:"bytes,12,opt,name=ending,proto3,oneof" json:"ending,omitempty"`
	InputAudio  *DeploymentAudioProvider `protobuf:"bytes,13,opt,name=inputAudio,proto3" json:"inputAudio,omitempty"`
	OutputAudio *DeploymentAudioProvider `protobuf:"bytes,14,opt,name=outputAudio,proto3" json:"outputAudio,omitempty"`
	// Types that are assignable to Icon:
	//
	//	*AssistantWebpluginDeployment_Url
	//	*AssistantWebpluginDeployment_Raw
	Icon                  isAssistantWebpluginDeployment_Icon `protobuf_oneof:"icon"`
	Suggestion            []string                            `protobuf:"bytes,20,rep,name=suggestion,proto3" json:"suggestion,omitempty"`
	HelpCenterEnabled     bool                                `protobuf:"varint,21,opt,name=helpCenterEnabled,proto3" json:"helpCenterEnabled,omitempty"`
	ProductCatalogEnabled bool                                `protobuf:"varint,22,opt,name=productCatalogEnabled,proto3" json:"productCatalogEnabled,omitempty"`
	ArticleCatalogEnabled bool                                `protobuf:"varint,23,opt,name=articleCatalogEnabled,proto3" json:"articleCatalogEnabled,omitempty"`
	UploadFileEnabled     bool                                `protobuf:"varint,24,opt,name=uploadFileEnabled,proto3" json:"uploadFileEnabled,omitempty"`
	CreatedDate           *timestamppb.Timestamp              `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate           *timestamppb.Timestamp              `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
	Status                string                              `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AssistantWebpluginDeployment) Reset() {
	*x = AssistantWebpluginDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantWebpluginDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantWebpluginDeployment) ProtoMessage() {}

func (x *AssistantWebpluginDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantWebpluginDeployment.ProtoReflect.Descriptor instead.
func (*AssistantWebpluginDeployment) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{1}
}

func (x *AssistantWebpluginDeployment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssistantWebpluginDeployment) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *AssistantWebpluginDeployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssistantWebpluginDeployment) GetGreeting() string {
	if x != nil && x.Greeting != nil {
		return *x.Greeting
	}
	return ""
}

func (x *AssistantWebpluginDeployment) GetMistake() string {
	if x != nil && x.Mistake != nil {
		return *x.Mistake
	}
	return ""
}

func (x *AssistantWebpluginDeployment) GetEnding() string {
	if x != nil && x.Ending != nil {
		return *x.Ending
	}
	return ""
}

func (x *AssistantWebpluginDeployment) GetInputAudio() *DeploymentAudioProvider {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *AssistantWebpluginDeployment) GetOutputAudio() *DeploymentAudioProvider {
	if x != nil {
		return x.OutputAudio
	}
	return nil
}

func (m *AssistantWebpluginDeployment) GetIcon() isAssistantWebpluginDeployment_Icon {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (x *AssistantWebpluginDeployment) GetUrl() string {
	if x, ok := x.GetIcon().(*AssistantWebpluginDeployment_Url); ok {
		return x.Url
	}
	return ""
}

func (x *AssistantWebpluginDeployment) GetRaw() *Content {
	if x, ok := x.GetIcon().(*AssistantWebpluginDeployment_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *AssistantWebpluginDeployment) GetSuggestion() []string {
	if x != nil {
		return x.Suggestion
	}
	return nil
}

func (x *AssistantWebpluginDeployment) GetHelpCenterEnabled() bool {
	if x != nil {
		return x.HelpCenterEnabled
	}
	return false
}

func (x *AssistantWebpluginDeployment) GetProductCatalogEnabled() bool {
	if x != nil {
		return x.ProductCatalogEnabled
	}
	return false
}

func (x *AssistantWebpluginDeployment) GetArticleCatalogEnabled() bool {
	if x != nil {
		return x.ArticleCatalogEnabled
	}
	return false
}

func (x *AssistantWebpluginDeployment) GetUploadFileEnabled() bool {
	if x != nil {
		return x.UploadFileEnabled
	}
	return false
}

func (x *AssistantWebpluginDeployment) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AssistantWebpluginDeployment) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *AssistantWebpluginDeployment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type isAssistantWebpluginDeployment_Icon interface {
	isAssistantWebpluginDeployment_Icon()
}

type AssistantWebpluginDeployment_Url struct {
	Url string `protobuf:"bytes,15,opt,name=url,proto3,oneof"`
}

type AssistantWebpluginDeployment_Raw struct {
	Raw *Content `protobuf:"bytes,16,opt,name=raw,proto3,oneof"`
}

func (*AssistantWebpluginDeployment_Url) isAssistantWebpluginDeployment_Icon() {}

func (*AssistantWebpluginDeployment_Raw) isAssistantWebpluginDeployment_Icon() {}

type AssistantPhoneDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssistantId       uint64                   `protobuf:"varint,5,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Greeting          *string                  `protobuf:"bytes,10,opt,name=greeting,proto3,oneof" json:"greeting,omitempty"`
	Mistake           *string                  `protobuf:"bytes,11,opt,name=mistake,proto3,oneof" json:"mistake,omitempty"`
	Ending            *string                  `protobuf:"bytes,12,opt,name=ending,proto3,oneof" json:"ending,omitempty"`
	InputAudio        *DeploymentAudioProvider `protobuf:"bytes,13,opt,name=inputAudio,proto3" json:"inputAudio,omitempty"`
	OutputAudio       *DeploymentAudioProvider `protobuf:"bytes,14,opt,name=outputAudio,proto3" json:"outputAudio,omitempty"`
	PhoneProviderName string                   `protobuf:"bytes,15,opt,name=phoneProviderName,proto3" json:"phoneProviderName,omitempty"`
	PhoneProviderId   uint64                   `protobuf:"varint,16,opt,name=phoneProviderId,proto3" json:"phoneProviderId,omitempty"`
	PhoneOptions      []*Metadata              `protobuf:"bytes,17,rep,name=phoneOptions,proto3" json:"phoneOptions,omitempty"`
	CreatedDate       *timestamppb.Timestamp   `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate       *timestamppb.Timestamp   `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
	Status            string                   `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AssistantPhoneDeployment) Reset() {
	*x = AssistantPhoneDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantPhoneDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantPhoneDeployment) ProtoMessage() {}

func (x *AssistantPhoneDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantPhoneDeployment.ProtoReflect.Descriptor instead.
func (*AssistantPhoneDeployment) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{2}
}

func (x *AssistantPhoneDeployment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssistantPhoneDeployment) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *AssistantPhoneDeployment) GetGreeting() string {
	if x != nil && x.Greeting != nil {
		return *x.Greeting
	}
	return ""
}

func (x *AssistantPhoneDeployment) GetMistake() string {
	if x != nil && x.Mistake != nil {
		return *x.Mistake
	}
	return ""
}

func (x *AssistantPhoneDeployment) GetEnding() string {
	if x != nil && x.Ending != nil {
		return *x.Ending
	}
	return ""
}

func (x *AssistantPhoneDeployment) GetInputAudio() *DeploymentAudioProvider {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *AssistantPhoneDeployment) GetOutputAudio() *DeploymentAudioProvider {
	if x != nil {
		return x.OutputAudio
	}
	return nil
}

func (x *AssistantPhoneDeployment) GetPhoneProviderName() string {
	if x != nil {
		return x.PhoneProviderName
	}
	return ""
}

func (x *AssistantPhoneDeployment) GetPhoneProviderId() uint64 {
	if x != nil {
		return x.PhoneProviderId
	}
	return 0
}

func (x *AssistantPhoneDeployment) GetPhoneOptions() []*Metadata {
	if x != nil {
		return x.PhoneOptions
	}
	return nil
}

func (x *AssistantPhoneDeployment) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AssistantPhoneDeployment) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *AssistantPhoneDeployment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AssistantWhatsappDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssistantId          uint64                 `protobuf:"varint,5,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Name                 string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Greeting             *string                `protobuf:"bytes,10,opt,name=greeting,proto3,oneof" json:"greeting,omitempty"`
	Mistake              *string                `protobuf:"bytes,11,opt,name=mistake,proto3,oneof" json:"mistake,omitempty"`
	Ending               *string                `protobuf:"bytes,12,opt,name=ending,proto3,oneof" json:"ending,omitempty"`
	WhatsappProviderName string                 `protobuf:"bytes,15,opt,name=whatsappProviderName,proto3" json:"whatsappProviderName,omitempty"`
	WhatsappProviderId   uint64                 `protobuf:"varint,16,opt,name=whatsappProviderId,proto3" json:"whatsappProviderId,omitempty"`
	WhatsappOptions      []*Metadata            `protobuf:"bytes,17,rep,name=whatsappOptions,proto3" json:"whatsappOptions,omitempty"`
	CreatedDate          *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate          *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
	Status               string                 `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AssistantWhatsappDeployment) Reset() {
	*x = AssistantWhatsappDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantWhatsappDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantWhatsappDeployment) ProtoMessage() {}

func (x *AssistantWhatsappDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantWhatsappDeployment.ProtoReflect.Descriptor instead.
func (*AssistantWhatsappDeployment) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{3}
}

func (x *AssistantWhatsappDeployment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssistantWhatsappDeployment) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *AssistantWhatsappDeployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssistantWhatsappDeployment) GetGreeting() string {
	if x != nil && x.Greeting != nil {
		return *x.Greeting
	}
	return ""
}

func (x *AssistantWhatsappDeployment) GetMistake() string {
	if x != nil && x.Mistake != nil {
		return *x.Mistake
	}
	return ""
}

func (x *AssistantWhatsappDeployment) GetEnding() string {
	if x != nil && x.Ending != nil {
		return *x.Ending
	}
	return ""
}

func (x *AssistantWhatsappDeployment) GetWhatsappProviderName() string {
	if x != nil {
		return x.WhatsappProviderName
	}
	return ""
}

func (x *AssistantWhatsappDeployment) GetWhatsappProviderId() uint64 {
	if x != nil {
		return x.WhatsappProviderId
	}
	return 0
}

func (x *AssistantWhatsappDeployment) GetWhatsappOptions() []*Metadata {
	if x != nil {
		return x.WhatsappOptions
	}
	return nil
}

func (x *AssistantWhatsappDeployment) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AssistantWhatsappDeployment) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *AssistantWhatsappDeployment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AssistantDebuggerDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssistantId uint64                   `protobuf:"varint,5,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Name        string                   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Greeting    *string                  `protobuf:"bytes,10,opt,name=greeting,proto3,oneof" json:"greeting,omitempty"`
	Mistake     *string                  `protobuf:"bytes,11,opt,name=mistake,proto3,oneof" json:"mistake,omitempty"`
	Ending      *string                  `protobuf:"bytes,12,opt,name=ending,proto3,oneof" json:"ending,omitempty"`
	InputAudio  *DeploymentAudioProvider `protobuf:"bytes,13,opt,name=inputAudio,proto3" json:"inputAudio,omitempty"`
	OutputAudio *DeploymentAudioProvider `protobuf:"bytes,14,opt,name=outputAudio,proto3" json:"outputAudio,omitempty"`
	// Types that are assignable to Icon:
	//
	//	*AssistantDebuggerDeployment_Url
	//	*AssistantDebuggerDeployment_Raw
	Icon        isAssistantDebuggerDeployment_Icon `protobuf_oneof:"icon"`
	Suggestion  []string                           `protobuf:"bytes,20,rep,name=suggestion,proto3" json:"suggestion,omitempty"`
	CreatedDate *timestamppb.Timestamp             `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate *timestamppb.Timestamp             `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
	Status      string                             `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AssistantDebuggerDeployment) Reset() {
	*x = AssistantDebuggerDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantDebuggerDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantDebuggerDeployment) ProtoMessage() {}

func (x *AssistantDebuggerDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantDebuggerDeployment.ProtoReflect.Descriptor instead.
func (*AssistantDebuggerDeployment) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{4}
}

func (x *AssistantDebuggerDeployment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssistantDebuggerDeployment) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *AssistantDebuggerDeployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssistantDebuggerDeployment) GetGreeting() string {
	if x != nil && x.Greeting != nil {
		return *x.Greeting
	}
	return ""
}

func (x *AssistantDebuggerDeployment) GetMistake() string {
	if x != nil && x.Mistake != nil {
		return *x.Mistake
	}
	return ""
}

func (x *AssistantDebuggerDeployment) GetEnding() string {
	if x != nil && x.Ending != nil {
		return *x.Ending
	}
	return ""
}

func (x *AssistantDebuggerDeployment) GetInputAudio() *DeploymentAudioProvider {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *AssistantDebuggerDeployment) GetOutputAudio() *DeploymentAudioProvider {
	if x != nil {
		return x.OutputAudio
	}
	return nil
}

func (m *AssistantDebuggerDeployment) GetIcon() isAssistantDebuggerDeployment_Icon {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (x *AssistantDebuggerDeployment) GetUrl() string {
	if x, ok := x.GetIcon().(*AssistantDebuggerDeployment_Url); ok {
		return x.Url
	}
	return ""
}

func (x *AssistantDebuggerDeployment) GetRaw() *Content {
	if x, ok := x.GetIcon().(*AssistantDebuggerDeployment_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *AssistantDebuggerDeployment) GetSuggestion() []string {
	if x != nil {
		return x.Suggestion
	}
	return nil
}

func (x *AssistantDebuggerDeployment) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AssistantDebuggerDeployment) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *AssistantDebuggerDeployment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type isAssistantDebuggerDeployment_Icon interface {
	isAssistantDebuggerDeployment_Icon()
}

type AssistantDebuggerDeployment_Url struct {
	Url string `protobuf:"bytes,15,opt,name=url,proto3,oneof"`
}

type AssistantDebuggerDeployment_Raw struct {
	Raw *Content `protobuf:"bytes,16,opt,name=raw,proto3,oneof"`
}

func (*AssistantDebuggerDeployment_Url) isAssistantDebuggerDeployment_Icon() {}

func (*AssistantDebuggerDeployment_Raw) isAssistantDebuggerDeployment_Icon() {}

type AssistantApiDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssistantId uint64                   `protobuf:"varint,5,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Greeting    *string                  `protobuf:"bytes,10,opt,name=greeting,proto3,oneof" json:"greeting,omitempty"`
	Mistake     *string                  `protobuf:"bytes,11,opt,name=mistake,proto3,oneof" json:"mistake,omitempty"`
	Ending      *string                  `protobuf:"bytes,12,opt,name=ending,proto3,oneof" json:"ending,omitempty"`
	InputAudio  *DeploymentAudioProvider `protobuf:"bytes,13,opt,name=inputAudio,proto3" json:"inputAudio,omitempty"`
	OutputAudio *DeploymentAudioProvider `protobuf:"bytes,14,opt,name=outputAudio,proto3" json:"outputAudio,omitempty"`
	CreatedDate *timestamppb.Timestamp   `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate *timestamppb.Timestamp   `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
	Status      string                   `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AssistantApiDeployment) Reset() {
	*x = AssistantApiDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantApiDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantApiDeployment) ProtoMessage() {}

func (x *AssistantApiDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantApiDeployment.ProtoReflect.Descriptor instead.
func (*AssistantApiDeployment) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{5}
}

func (x *AssistantApiDeployment) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssistantApiDeployment) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *AssistantApiDeployment) GetGreeting() string {
	if x != nil && x.Greeting != nil {
		return *x.Greeting
	}
	return ""
}

func (x *AssistantApiDeployment) GetMistake() string {
	if x != nil && x.Mistake != nil {
		return *x.Mistake
	}
	return ""
}

func (x *AssistantApiDeployment) GetEnding() string {
	if x != nil && x.Ending != nil {
		return *x.Ending
	}
	return ""
}

func (x *AssistantApiDeployment) GetInputAudio() *DeploymentAudioProvider {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *AssistantApiDeployment) GetOutputAudio() *DeploymentAudioProvider {
	if x != nil {
		return x.OutputAudio
	}
	return nil
}

func (x *AssistantApiDeployment) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AssistantApiDeployment) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *AssistantApiDeployment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CreateAssistantDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Deployment:
	//
	//	*CreateAssistantDeploymentRequest_Api
	//	*CreateAssistantDeploymentRequest_Debugger
	//	*CreateAssistantDeploymentRequest_Whatsapp
	//	*CreateAssistantDeploymentRequest_Phone
	//	*CreateAssistantDeploymentRequest_Plugin
	Deployment isCreateAssistantDeploymentRequest_Deployment `protobuf_oneof:"deployment"`
}

func (x *CreateAssistantDeploymentRequest) Reset() {
	*x = CreateAssistantDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssistantDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssistantDeploymentRequest) ProtoMessage() {}

func (x *CreateAssistantDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssistantDeploymentRequest.ProtoReflect.Descriptor instead.
func (*CreateAssistantDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{6}
}

func (m *CreateAssistantDeploymentRequest) GetDeployment() isCreateAssistantDeploymentRequest_Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

func (x *CreateAssistantDeploymentRequest) GetApi() *AssistantApiDeployment {
	if x, ok := x.GetDeployment().(*CreateAssistantDeploymentRequest_Api); ok {
		return x.Api
	}
	return nil
}

func (x *CreateAssistantDeploymentRequest) GetDebugger() *AssistantDebuggerDeployment {
	if x, ok := x.GetDeployment().(*CreateAssistantDeploymentRequest_Debugger); ok {
		return x.Debugger
	}
	return nil
}

func (x *CreateAssistantDeploymentRequest) GetWhatsapp() *AssistantWhatsappDeployment {
	if x, ok := x.GetDeployment().(*CreateAssistantDeploymentRequest_Whatsapp); ok {
		return x.Whatsapp
	}
	return nil
}

func (x *CreateAssistantDeploymentRequest) GetPhone() *AssistantPhoneDeployment {
	if x, ok := x.GetDeployment().(*CreateAssistantDeploymentRequest_Phone); ok {
		return x.Phone
	}
	return nil
}

func (x *CreateAssistantDeploymentRequest) GetPlugin() *AssistantWebpluginDeployment {
	if x, ok := x.GetDeployment().(*CreateAssistantDeploymentRequest_Plugin); ok {
		return x.Plugin
	}
	return nil
}

type isCreateAssistantDeploymentRequest_Deployment interface {
	isCreateAssistantDeploymentRequest_Deployment()
}

type CreateAssistantDeploymentRequest_Api struct {
	Api *AssistantApiDeployment `protobuf:"bytes,1,opt,name=api,proto3,oneof"`
}

type CreateAssistantDeploymentRequest_Debugger struct {
	Debugger *AssistantDebuggerDeployment `protobuf:"bytes,2,opt,name=debugger,proto3,oneof"`
}

type CreateAssistantDeploymentRequest_Whatsapp struct {
	Whatsapp *AssistantWhatsappDeployment `protobuf:"bytes,3,opt,name=whatsapp,proto3,oneof"`
}

type CreateAssistantDeploymentRequest_Phone struct {
	Phone *AssistantPhoneDeployment `protobuf:"bytes,4,opt,name=phone,proto3,oneof"`
}

type CreateAssistantDeploymentRequest_Plugin struct {
	Plugin *AssistantWebpluginDeployment `protobuf:"bytes,5,opt,name=plugin,proto3,oneof"`
}

func (*CreateAssistantDeploymentRequest_Api) isCreateAssistantDeploymentRequest_Deployment() {}

func (*CreateAssistantDeploymentRequest_Debugger) isCreateAssistantDeploymentRequest_Deployment() {}

func (*CreateAssistantDeploymentRequest_Whatsapp) isCreateAssistantDeploymentRequest_Deployment() {}

func (*CreateAssistantDeploymentRequest_Phone) isCreateAssistantDeploymentRequest_Deployment() {}

func (*CreateAssistantDeploymentRequest_Plugin) isCreateAssistantDeploymentRequest_Deployment() {}

type GetAssistantApiDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool                    `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *AssistantApiDeployment `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error                  `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAssistantApiDeploymentResponse) Reset() {
	*x = GetAssistantApiDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantApiDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantApiDeploymentResponse) ProtoMessage() {}

func (x *GetAssistantApiDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantApiDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetAssistantApiDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{7}
}

func (x *GetAssistantApiDeploymentResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAssistantApiDeploymentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAssistantApiDeploymentResponse) GetData() *AssistantApiDeployment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAssistantApiDeploymentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAssistantPhoneDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool                      `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *AssistantPhoneDeployment `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error                    `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAssistantPhoneDeploymentResponse) Reset() {
	*x = GetAssistantPhoneDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantPhoneDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantPhoneDeploymentResponse) ProtoMessage() {}

func (x *GetAssistantPhoneDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantPhoneDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetAssistantPhoneDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{8}
}

func (x *GetAssistantPhoneDeploymentResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAssistantPhoneDeploymentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAssistantPhoneDeploymentResponse) GetData() *AssistantPhoneDeployment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAssistantPhoneDeploymentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAssistantWhatsappDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool                         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *AssistantWhatsappDeployment `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error                       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAssistantWhatsappDeploymentResponse) Reset() {
	*x = GetAssistantWhatsappDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantWhatsappDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantWhatsappDeploymentResponse) ProtoMessage() {}

func (x *GetAssistantWhatsappDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantWhatsappDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetAssistantWhatsappDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{9}
}

func (x *GetAssistantWhatsappDeploymentResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAssistantWhatsappDeploymentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAssistantWhatsappDeploymentResponse) GetData() *AssistantWhatsappDeployment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAssistantWhatsappDeploymentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAssistantDebuggerDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool                         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *AssistantDebuggerDeployment `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error                       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAssistantDebuggerDeploymentResponse) Reset() {
	*x = GetAssistantDebuggerDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantDebuggerDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantDebuggerDeploymentResponse) ProtoMessage() {}

func (x *GetAssistantDebuggerDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantDebuggerDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetAssistantDebuggerDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{10}
}

func (x *GetAssistantDebuggerDeploymentResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAssistantDebuggerDeploymentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAssistantDebuggerDeploymentResponse) GetData() *AssistantDebuggerDeployment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAssistantDebuggerDeploymentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAssistantWebpluginDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool                          `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *AssistantWebpluginDeployment `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error                        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAssistantWebpluginDeploymentResponse) Reset() {
	*x = GetAssistantWebpluginDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantWebpluginDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantWebpluginDeploymentResponse) ProtoMessage() {}

func (x *GetAssistantWebpluginDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantWebpluginDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetAssistantWebpluginDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{11}
}

func (x *GetAssistantWebpluginDeploymentResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAssistantWebpluginDeploymentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAssistantWebpluginDeploymentResponse) GetData() *AssistantWebpluginDeployment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAssistantWebpluginDeploymentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAssistantDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistantId uint64 `protobuf:"varint,1,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
}

func (x *GetAssistantDeploymentRequest) Reset() {
	*x = GetAssistantDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_deployment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantDeploymentRequest) ProtoMessage() {}

func (x *GetAssistantDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_deployment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetAssistantDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_assistant_deployment_proto_rawDescGZIP(), []int{12}
}

func (x *GetAssistantDeploymentRequest) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

var File_assistant_deployment_proto protoreflect.FileDescriptor

var file_assistant_deployment_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2d, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x17, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xb5, 0x06, 0x0a, 0x1c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x57, 0x65, 0x62, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x65, 0x6c, 0x70, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x68, 0x65, 0x6c, 0x70, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x86, 0x05, 0x0a, 0x18,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x9d, 0x04, 0x0a, 0x1b, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x14, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77,
	0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x12, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x12, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0f, 0x77, 0x68, 0x61, 0x74, 0x73,
	0x61, 0x70, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x77, 0x68, 0x61,
	0x74, 0x73, 0x61, 0x70, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0xec, 0x04, 0x0a, 0x1b, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xf9, 0x03, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x41, 0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x67, 0x72, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x69,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x48, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22,
	0x87, 0x03, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12,
	0x48, 0x0a, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x77, 0x68, 0x61,
	0x74, 0x73, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x77, 0x68, 0x61, 0x74, 0x73,
	0x61, 0x70, 0x70, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65,
	0x62, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb4,
	0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x45,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x32, 0xec, 0x0a, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x41, 0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8b, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70,
	0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70,
	0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x78, 0x61, 0x74, 0x69, 0x63, 0x2f, 0x77, 0x65, 0x62, 0x2d, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x65,
	0x78, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_assistant_deployment_proto_rawDescOnce sync.Once
	file_assistant_deployment_proto_rawDescData = file_assistant_deployment_proto_rawDesc
)

func file_assistant_deployment_proto_rawDescGZIP() []byte {
	file_assistant_deployment_proto_rawDescOnce.Do(func() {
		file_assistant_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(file_assistant_deployment_proto_rawDescData)
	})
	return file_assistant_deployment_proto_rawDescData
}

var file_assistant_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_assistant_deployment_proto_goTypes = []any{
	(*DeploymentAudioProvider)(nil),                 // 0: assistant_api.DeploymentAudioProvider
	(*AssistantWebpluginDeployment)(nil),            // 1: assistant_api.AssistantWebpluginDeployment
	(*AssistantPhoneDeployment)(nil),                // 2: assistant_api.AssistantPhoneDeployment
	(*AssistantWhatsappDeployment)(nil),             // 3: assistant_api.AssistantWhatsappDeployment
	(*AssistantDebuggerDeployment)(nil),             // 4: assistant_api.AssistantDebuggerDeployment
	(*AssistantApiDeployment)(nil),                  // 5: assistant_api.AssistantApiDeployment
	(*CreateAssistantDeploymentRequest)(nil),        // 6: assistant_api.CreateAssistantDeploymentRequest
	(*GetAssistantApiDeploymentResponse)(nil),       // 7: assistant_api.GetAssistantApiDeploymentResponse
	(*GetAssistantPhoneDeploymentResponse)(nil),     // 8: assistant_api.GetAssistantPhoneDeploymentResponse
	(*GetAssistantWhatsappDeploymentResponse)(nil),  // 9: assistant_api.GetAssistantWhatsappDeploymentResponse
	(*GetAssistantDebuggerDeploymentResponse)(nil),  // 10: assistant_api.GetAssistantDebuggerDeploymentResponse
	(*GetAssistantWebpluginDeploymentResponse)(nil), // 11: assistant_api.GetAssistantWebpluginDeploymentResponse
	(*GetAssistantDeploymentRequest)(nil),           // 12: assistant_api.GetAssistantDeploymentRequest
	(*Metadata)(nil),                                // 13: Metadata
	(*Content)(nil),                                 // 14: Content
	(*timestamppb.Timestamp)(nil),                   // 15: google.protobuf.Timestamp
	(*Error)(nil),                                   // 16: Error
}
var file_assistant_deployment_proto_depIdxs = []int32{
	13, // 0: assistant_api.DeploymentAudioProvider.audioOptions:type_name -> Metadata
	0,  // 1: assistant_api.AssistantWebpluginDeployment.inputAudio:type_name -> assistant_api.DeploymentAudioProvider
	0,  // 2: assistant_api.AssistantWebpluginDeployment.outputAudio:type_name -> assistant_api.DeploymentAudioProvider
	14, // 3: assistant_api.AssistantWebpluginDeployment.raw:type_name -> Content
	15, // 4: assistant_api.AssistantWebpluginDeployment.createdDate:type_name -> google.protobuf.Timestamp
	15, // 5: assistant_api.AssistantWebpluginDeployment.updatedDate:type_name -> google.protobuf.Timestamp
	0,  // 6: assistant_api.AssistantPhoneDeployment.inputAudio:type_name -> assistant_api.DeploymentAudioProvider
	0,  // 7: assistant_api.AssistantPhoneDeployment.outputAudio:type_name -> assistant_api.DeploymentAudioProvider
	13, // 8: assistant_api.AssistantPhoneDeployment.phoneOptions:type_name -> Metadata
	15, // 9: assistant_api.AssistantPhoneDeployment.createdDate:type_name -> google.protobuf.Timestamp
	15, // 10: assistant_api.AssistantPhoneDeployment.updatedDate:type_name -> google.protobuf.Timestamp
	13, // 11: assistant_api.AssistantWhatsappDeployment.whatsappOptions:type_name -> Metadata
	15, // 12: assistant_api.AssistantWhatsappDeployment.createdDate:type_name -> google.protobuf.Timestamp
	15, // 13: assistant_api.AssistantWhatsappDeployment.updatedDate:type_name -> google.protobuf.Timestamp
	0,  // 14: assistant_api.AssistantDebuggerDeployment.inputAudio:type_name -> assistant_api.DeploymentAudioProvider
	0,  // 15: assistant_api.AssistantDebuggerDeployment.outputAudio:type_name -> assistant_api.DeploymentAudioProvider
	14, // 16: assistant_api.AssistantDebuggerDeployment.raw:type_name -> Content
	15, // 17: assistant_api.AssistantDebuggerDeployment.createdDate:type_name -> google.protobuf.Timestamp
	15, // 18: assistant_api.AssistantDebuggerDeployment.updatedDate:type_name -> google.protobuf.Timestamp
	0,  // 19: assistant_api.AssistantApiDeployment.inputAudio:type_name -> assistant_api.DeploymentAudioProvider
	0,  // 20: assistant_api.AssistantApiDeployment.outputAudio:type_name -> assistant_api.DeploymentAudioProvider
	15, // 21: assistant_api.AssistantApiDeployment.createdDate:type_name -> google.protobuf.Timestamp
	15, // 22: assistant_api.AssistantApiDeployment.updatedDate:type_name -> google.protobuf.Timestamp
	5,  // 23: assistant_api.CreateAssistantDeploymentRequest.api:type_name -> assistant_api.AssistantApiDeployment
	4,  // 24: assistant_api.CreateAssistantDeploymentRequest.debugger:type_name -> assistant_api.AssistantDebuggerDeployment
	3,  // 25: assistant_api.CreateAssistantDeploymentRequest.whatsapp:type_name -> assistant_api.AssistantWhatsappDeployment
	2,  // 26: assistant_api.CreateAssistantDeploymentRequest.phone:type_name -> assistant_api.AssistantPhoneDeployment
	1,  // 27: assistant_api.CreateAssistantDeploymentRequest.plugin:type_name -> assistant_api.AssistantWebpluginDeployment
	5,  // 28: assistant_api.GetAssistantApiDeploymentResponse.data:type_name -> assistant_api.AssistantApiDeployment
	16, // 29: assistant_api.GetAssistantApiDeploymentResponse.error:type_name -> Error
	2,  // 30: assistant_api.GetAssistantPhoneDeploymentResponse.data:type_name -> assistant_api.AssistantPhoneDeployment
	16, // 31: assistant_api.GetAssistantPhoneDeploymentResponse.error:type_name -> Error
	3,  // 32: assistant_api.GetAssistantWhatsappDeploymentResponse.data:type_name -> assistant_api.AssistantWhatsappDeployment
	16, // 33: assistant_api.GetAssistantWhatsappDeploymentResponse.error:type_name -> Error
	4,  // 34: assistant_api.GetAssistantDebuggerDeploymentResponse.data:type_name -> assistant_api.AssistantDebuggerDeployment
	16, // 35: assistant_api.GetAssistantDebuggerDeploymentResponse.error:type_name -> Error
	1,  // 36: assistant_api.GetAssistantWebpluginDeploymentResponse.data:type_name -> assistant_api.AssistantWebpluginDeployment
	16, // 37: assistant_api.GetAssistantWebpluginDeploymentResponse.error:type_name -> Error
	6,  // 38: assistant_api.AssistantDeploymentService.CreateAssistantApiDeployment:input_type -> assistant_api.CreateAssistantDeploymentRequest
	12, // 39: assistant_api.AssistantDeploymentService.GetAssistantApiDeployment:input_type -> assistant_api.GetAssistantDeploymentRequest
	6,  // 40: assistant_api.AssistantDeploymentService.CreateAssistantWebpluginDeployment:input_type -> assistant_api.CreateAssistantDeploymentRequest
	12, // 41: assistant_api.AssistantDeploymentService.GetAssistantWebpluginDeployment:input_type -> assistant_api.GetAssistantDeploymentRequest
	6,  // 42: assistant_api.AssistantDeploymentService.CreateAssistantDebuggerDeployment:input_type -> assistant_api.CreateAssistantDeploymentRequest
	12, // 43: assistant_api.AssistantDeploymentService.GetAssistantDebuggerDeployment:input_type -> assistant_api.GetAssistantDeploymentRequest
	6,  // 44: assistant_api.AssistantDeploymentService.CreateAssistantWhatsappDeployment:input_type -> assistant_api.CreateAssistantDeploymentRequest
	12, // 45: assistant_api.AssistantDeploymentService.GetAssistantWhatsappDeployment:input_type -> assistant_api.GetAssistantDeploymentRequest
	6,  // 46: assistant_api.AssistantDeploymentService.CreateAssistantPhoneDeployment:input_type -> assistant_api.CreateAssistantDeploymentRequest
	12, // 47: assistant_api.AssistantDeploymentService.GetAssistantPhoneDeployment:input_type -> assistant_api.GetAssistantDeploymentRequest
	7,  // 48: assistant_api.AssistantDeploymentService.CreateAssistantApiDeployment:output_type -> assistant_api.GetAssistantApiDeploymentResponse
	7,  // 49: assistant_api.AssistantDeploymentService.GetAssistantApiDeployment:output_type -> assistant_api.GetAssistantApiDeploymentResponse
	11, // 50: assistant_api.AssistantDeploymentService.CreateAssistantWebpluginDeployment:output_type -> assistant_api.GetAssistantWebpluginDeploymentResponse
	11, // 51: assistant_api.AssistantDeploymentService.GetAssistantWebpluginDeployment:output_type -> assistant_api.GetAssistantWebpluginDeploymentResponse
	10, // 52: assistant_api.AssistantDeploymentService.CreateAssistantDebuggerDeployment:output_type -> assistant_api.GetAssistantDebuggerDeploymentResponse
	10, // 53: assistant_api.AssistantDeploymentService.GetAssistantDebuggerDeployment:output_type -> assistant_api.GetAssistantDebuggerDeploymentResponse
	9,  // 54: assistant_api.AssistantDeploymentService.CreateAssistantWhatsappDeployment:output_type -> assistant_api.GetAssistantWhatsappDeploymentResponse
	9,  // 55: assistant_api.AssistantDeploymentService.GetAssistantWhatsappDeployment:output_type -> assistant_api.GetAssistantWhatsappDeploymentResponse
	8,  // 56: assistant_api.AssistantDeploymentService.CreateAssistantPhoneDeployment:output_type -> assistant_api.GetAssistantPhoneDeploymentResponse
	8,  // 57: assistant_api.AssistantDeploymentService.GetAssistantPhoneDeployment:output_type -> assistant_api.GetAssistantPhoneDeploymentResponse
	48, // [48:58] is the sub-list for method output_type
	38, // [38:48] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_assistant_deployment_proto_init() }
func file_assistant_deployment_proto_init() {
	if File_assistant_deployment_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_assistant_deployment_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentAudioProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AssistantWebpluginDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AssistantPhoneDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AssistantWhatsappDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AssistantDebuggerDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AssistantApiDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAssistantDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantApiDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantPhoneDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantWhatsappDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantDebuggerDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantWebpluginDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_deployment_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_assistant_deployment_proto_msgTypes[1].OneofWrappers = []any{
		(*AssistantWebpluginDeployment_Url)(nil),
		(*AssistantWebpluginDeployment_Raw)(nil),
	}
	file_assistant_deployment_proto_msgTypes[2].OneofWrappers = []any{}
	file_assistant_deployment_proto_msgTypes[3].OneofWrappers = []any{}
	file_assistant_deployment_proto_msgTypes[4].OneofWrappers = []any{
		(*AssistantDebuggerDeployment_Url)(nil),
		(*AssistantDebuggerDeployment_Raw)(nil),
	}
	file_assistant_deployment_proto_msgTypes[5].OneofWrappers = []any{}
	file_assistant_deployment_proto_msgTypes[6].OneofWrappers = []any{
		(*CreateAssistantDeploymentRequest_Api)(nil),
		(*CreateAssistantDeploymentRequest_Debugger)(nil),
		(*CreateAssistantDeploymentRequest_Whatsapp)(nil),
		(*CreateAssistantDeploymentRequest_Phone)(nil),
		(*CreateAssistantDeploymentRequest_Plugin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_assistant_deployment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_assistant_deployment_proto_goTypes,
		DependencyIndexes: file_assistant_deployment_proto_depIdxs,
		MessageInfos:      file_assistant_deployment_proto_msgTypes,
	}.Build()
	File_assistant_deployment_proto = out.File
	file_assistant_deployment_proto_rawDesc = nil
	file_assistant_deployment_proto_goTypes = nil
	file_assistant_deployment_proto_depIdxs = nil
}

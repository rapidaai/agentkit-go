// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: audit-logging-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuditLoggingService_GetAllAuditLog_FullMethodName = "/integration_api.AuditLoggingService/GetAllAuditLog"
	AuditLoggingService_GetAuditLog_FullMethodName    = "/integration_api.AuditLoggingService/GetAuditLog"
	AuditLoggingService_CreateMetadata_FullMethodName = "/integration_api.AuditLoggingService/CreateMetadata"
)

// AuditLoggingServiceClient is the client API for AuditLoggingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditLoggingServiceClient interface {
	GetAllAuditLog(ctx context.Context, in *GetAllAuditLogRequest, opts ...grpc.CallOption) (*GetAllAuditLogResponse, error)
	GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...grpc.CallOption) (*GetAuditLogResponse, error)
	CreateMetadata(ctx context.Context, in *CreateMetadataRequest, opts ...grpc.CallOption) (*CreateMetadataResponse, error)
}

type auditLoggingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditLoggingServiceClient(cc grpc.ClientConnInterface) AuditLoggingServiceClient {
	return &auditLoggingServiceClient{cc}
}

func (c *auditLoggingServiceClient) GetAllAuditLog(ctx context.Context, in *GetAllAuditLogRequest, opts ...grpc.CallOption) (*GetAllAuditLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAuditLogResponse)
	err := c.cc.Invoke(ctx, AuditLoggingService_GetAllAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLoggingServiceClient) GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...grpc.CallOption) (*GetAuditLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuditLogResponse)
	err := c.cc.Invoke(ctx, AuditLoggingService_GetAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLoggingServiceClient) CreateMetadata(ctx context.Context, in *CreateMetadataRequest, opts ...grpc.CallOption) (*CreateMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMetadataResponse)
	err := c.cc.Invoke(ctx, AuditLoggingService_CreateMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditLoggingServiceServer is the server API for AuditLoggingService service.
// All implementations should embed UnimplementedAuditLoggingServiceServer
// for forward compatibility.
type AuditLoggingServiceServer interface {
	GetAllAuditLog(context.Context, *GetAllAuditLogRequest) (*GetAllAuditLogResponse, error)
	GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error)
	CreateMetadata(context.Context, *CreateMetadataRequest) (*CreateMetadataResponse, error)
}

// UnimplementedAuditLoggingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuditLoggingServiceServer struct{}

func (UnimplementedAuditLoggingServiceServer) GetAllAuditLog(context.Context, *GetAllAuditLogRequest) (*GetAllAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAuditLog not implemented")
}
func (UnimplementedAuditLoggingServiceServer) GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLog not implemented")
}
func (UnimplementedAuditLoggingServiceServer) CreateMetadata(context.Context, *CreateMetadataRequest) (*CreateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetadata not implemented")
}
func (UnimplementedAuditLoggingServiceServer) testEmbeddedByValue() {}

// UnsafeAuditLoggingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditLoggingServiceServer will
// result in compilation errors.
type UnsafeAuditLoggingServiceServer interface {
	mustEmbedUnimplementedAuditLoggingServiceServer()
}

func RegisterAuditLoggingServiceServer(s grpc.ServiceRegistrar, srv AuditLoggingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuditLoggingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuditLoggingService_ServiceDesc, srv)
}

func _AuditLoggingService_GetAllAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLoggingServiceServer).GetAllAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLoggingService_GetAllAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLoggingServiceServer).GetAllAuditLog(ctx, req.(*GetAllAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLoggingService_GetAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLoggingServiceServer).GetAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLoggingService_GetAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLoggingServiceServer).GetAuditLog(ctx, req.(*GetAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLoggingService_CreateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLoggingServiceServer).CreateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLoggingService_CreateMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLoggingServiceServer).CreateMetadata(ctx, req.(*CreateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditLoggingService_ServiceDesc is the grpc.ServiceDesc for AuditLoggingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditLoggingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration_api.AuditLoggingService",
	HandlerType: (*AuditLoggingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAuditLog",
			Handler:    _AuditLoggingService_GetAllAuditLog_Handler,
		},
		{
			MethodName: "GetAuditLog",
			Handler:    _AuditLoggingService_GetAuditLog_Handler,
		},
		{
			MethodName: "CreateMetadata",
			Handler:    _AuditLoggingService_CreateMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audit-logging-api.proto",
}

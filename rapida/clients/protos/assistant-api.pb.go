// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: assistant-api.proto

package lexatic_backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Assistant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status           string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Visibility       string `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	Source           string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	SourceIdentifier uint64 `protobuf:"varint,5,opt,name=sourceIdentifier,proto3" json:"sourceIdentifier,omitempty"`
	ProjectId           uint64 `protobuf:"varint,7,opt,name=projectId,proto3" json:"projectId,omitempty"`
	OrganizationId      uint64 `protobuf:"varint,8,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	AssistantProvider   string `protobuf:"bytes,9,opt,name=assistantProvider,proto3" json:"assistantProvider,omitempty"`
	AssistantProviderId uint64 `protobuf:"varint,10,opt,name=assistantProviderId,proto3" json:"assistantProviderId,omitempty"`
	Name                string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Description         string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	AssistantProviderModel     *AssistantProviderModel     `protobuf:"bytes,50,opt,name=assistantProviderModel,proto3" json:"assistantProviderModel,omitempty"`
	AssistantProviderAgentkit  *AssistantProviderAgentkit  `protobuf:"bytes,51,opt,name=assistantProviderAgentkit,proto3" json:"assistantProviderAgentkit,omitempty"`
	AssistantProviderWebsocket *AssistantProviderWebsocket `protobuf:"bytes,52,opt,name=assistantProviderWebsocket,proto3" json:"assistantProviderWebsocket,omitempty"`
	AssistantTag        *Tag                          `protobuf:"bytes,14,opt,name=assistantTag,proto3" json:"assistantTag,omitempty"`
	CreatedBy           uint64                        `protobuf:"varint,22,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedUser         *User                         `protobuf:"bytes,23,opt,name=createdUser,proto3" json:"createdUser,omitempty"`
	UpdatedBy           uint64                        `protobuf:"varint,24,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	UpdatedUser         *User                         `protobuf:"bytes,25,opt,name=updatedUser,proto3" json:"updatedUser,omitempty"`
	CreatedDate         *timestamppb.Timestamp        `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate         *timestamppb.Timestamp        `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
	DebuggerDeployment  *AssistantDebuggerDeployment  `protobuf:"bytes,30,opt,name=debuggerDeployment,proto3" json:"debuggerDeployment,omitempty"`
	PhoneDeployment     *AssistantPhoneDeployment     `protobuf:"bytes,31,opt,name=phoneDeployment,proto3" json:"phoneDeployment,omitempty"`
	WhatsappDeployment  *AssistantWhatsappDeployment  `protobuf:"bytes,32,opt,name=whatsappDeployment,proto3" json:"whatsappDeployment,omitempty"`
	WebPluginDeployment *AssistantWebpluginDeployment `protobuf:"bytes,33,opt,name=webPluginDeployment,proto3" json:"webPluginDeployment,omitempty"`
	ApiDeployment       *AssistantApiDeployment       `protobuf:"bytes,34,opt,name=apiDeployment,proto3" json:"apiDeployment,omitempty"`
	AssistantConversations []*AssistantConversation `protobuf:"bytes,35,rep,name=assistantConversations,proto3" json:"assistantConversations,omitempty"`
	AssistantWebhooks      []*AssistantWebhook      `protobuf:"bytes,36,rep,name=assistantWebhooks,proto3" json:"assistantWebhooks,omitempty"`
	AssistantTools         []*AssistantTool         `protobuf:"bytes,37,rep,name=assistantTools,proto3" json:"assistantTools,omitempty"`
}

func (x *Assistant) Reset() {
	*x = Assistant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assistant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assistant) ProtoMessage() {}

func (x *Assistant) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assistant.ProtoReflect.Descriptor instead.
func (*Assistant) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{0}
}

func (x *Assistant) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Assistant) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Assistant) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *Assistant) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Assistant) GetSourceIdentifier() uint64 {
	if x != nil {
		return x.SourceIdentifier
	}
	return 0
}

func (x *Assistant) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Assistant) GetOrganizationId() uint64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Assistant) GetAssistantProvider() string {
	if x != nil {
		return x.AssistantProvider
	}
	return ""
}

func (x *Assistant) GetAssistantProviderId() uint64 {
	if x != nil {
		return x.AssistantProviderId
	}
	return 0
}

func (x *Assistant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Assistant) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Assistant) GetAssistantProviderModel() *AssistantProviderModel {
	if x != nil {
		return x.AssistantProviderModel
	}
	return nil
}

func (x *Assistant) GetAssistantProviderAgentkit() *AssistantProviderAgentkit {
	if x != nil {
		return x.AssistantProviderAgentkit
	}
	return nil
}

func (x *Assistant) GetAssistantProviderWebsocket() *AssistantProviderWebsocket {
	if x != nil {
		return x.AssistantProviderWebsocket
	}
	return nil
}

func (x *Assistant) GetAssistantTag() *Tag {
	if x != nil {
		return x.AssistantTag
	}
	return nil
}

func (x *Assistant) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Assistant) GetCreatedUser() *User {
	if x != nil {
		return x.CreatedUser
	}
	return nil
}

func (x *Assistant) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *Assistant) GetUpdatedUser() *User {
	if x != nil {
		return x.UpdatedUser
	}
	return nil
}

func (x *Assistant) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *Assistant) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *Assistant) GetDebuggerDeployment() *AssistantDebuggerDeployment {
	if x != nil {
		return x.DebuggerDeployment
	}
	return nil
}

func (x *Assistant) GetPhoneDeployment() *AssistantPhoneDeployment {
	if x != nil {
		return x.PhoneDeployment
	}
	return nil
}

func (x *Assistant) GetWhatsappDeployment() *AssistantWhatsappDeployment {
	if x != nil {
		return x.WhatsappDeployment
	}
	return nil
}

func (x *Assistant) GetWebPluginDeployment() *AssistantWebpluginDeployment {
	if x != nil {
		return x.WebPluginDeployment
	}
	return nil
}

func (x *Assistant) GetApiDeployment() *AssistantApiDeployment {
	if x != nil {
		return x.ApiDeployment
	}
	return nil
}

func (x *Assistant) GetAssistantConversations() []*AssistantConversation {
	if x != nil {
		return x.AssistantConversations
	}
	return nil
}

func (x *Assistant) GetAssistantWebhooks() []*AssistantWebhook {
	if x != nil {
		return x.AssistantWebhooks
	}
	return nil
}

func (x *Assistant) GetAssistantTools() []*AssistantTool {
	if x != nil {
		return x.AssistantTools
	}
	return nil
}

type CreateAssistantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistantProvider   *CreateAssistantProviderRequest    `protobuf:"bytes,1,opt,name=assistantProvider,proto3" json:"assistantProvider,omitempty"`
	AssistantKnowledges []*CreateAssistantKnowledgeRequest `protobuf:"bytes,2,rep,name=assistantKnowledges,proto3" json:"assistantKnowledges,omitempty"`
	AssistantTools      []*CreateAssistantToolRequest      `protobuf:"bytes,3,rep,name=assistantTools,proto3" json:"assistantTools,omitempty"`
	Description         string                             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Visibility          string                             `protobuf:"bytes,5,opt,name=visibility,proto3" json:"visibility,omitempty"`
	Language            string                             `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	Source              string                             `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	SourceIdentifier    uint64                             `protobuf:"varint,8,opt,name=sourceIdentifier,proto3" json:"sourceIdentifier,omitempty"`
	Tags                []string                           `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	Name                string                             `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateAssistantRequest) Reset() {
	*x = CreateAssistantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssistantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssistantRequest) ProtoMessage() {}

func (x *CreateAssistantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssistantRequest.ProtoReflect.Descriptor instead.
func (*CreateAssistantRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAssistantRequest) GetAssistantProvider() *CreateAssistantProviderRequest {
	if x != nil {
		return x.AssistantProvider
	}
	return nil
}

func (x *CreateAssistantRequest) GetAssistantKnowledges() []*CreateAssistantKnowledgeRequest {
	if x != nil {
		return x.AssistantKnowledges
	}
	return nil
}

func (x *CreateAssistantRequest) GetAssistantTools() []*CreateAssistantToolRequest {
	if x != nil {
		return x.AssistantTools
	}
	return nil
}

func (x *CreateAssistantRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAssistantRequest) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *CreateAssistantRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *CreateAssistantRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreateAssistantRequest) GetSourceIdentifier() uint64 {
	if x != nil {
		return x.SourceIdentifier
	}
	return 0
}

func (x *CreateAssistantRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateAssistantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateAssistantTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistantId uint64   `protobuf:"varint,1,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Tags        []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CreateAssistantTagRequest) Reset() {
	*x = CreateAssistantTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssistantTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssistantTagRequest) ProtoMessage() {}

func (x *CreateAssistantTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssistantTagRequest.ProtoReflect.Descriptor instead.
func (*CreateAssistantTagRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAssistantTagRequest) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *CreateAssistantTagRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// get request
type GetAssistantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistantDefinition *AssistantDefinition `protobuf:"bytes,1,opt,name=assistantDefinition,proto3" json:"assistantDefinition,omitempty"`
}

func (x *GetAssistantRequest) Reset() {
	*x = GetAssistantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantRequest) ProtoMessage() {}

func (x *GetAssistantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantRequest.ProtoReflect.Descriptor instead.
func (*GetAssistantRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetAssistantRequest) GetAssistantDefinition() *AssistantDefinition {
	if x != nil {
		return x.AssistantDefinition
	}
	return nil
}

type DeleteAssistantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAssistantRequest) Reset() {
	*x = DeleteAssistantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssistantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssistantRequest) ProtoMessage() {}

func (x *DeleteAssistantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssistantRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssistantRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteAssistantRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAssistantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool       `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *Assistant `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAssistantResponse) Reset() {
	*x = GetAssistantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantResponse) ProtoMessage() {}

func (x *GetAssistantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantResponse.ProtoReflect.Descriptor instead.
func (*GetAssistantResponse) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetAssistantResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAssistantResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAssistantResponse) GetData() *Assistant {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAssistantResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAllAssistantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginate  *Paginate   `protobuf:"bytes,1,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias []*Criteria `protobuf:"bytes,2,rep,name=criterias,proto3" json:"criterias,omitempty"`
}

func (x *GetAllAssistantRequest) Reset() {
	*x = GetAllAssistantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssistantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssistantRequest) ProtoMessage() {}

func (x *GetAllAssistantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssistantRequest.ProtoReflect.Descriptor instead.
func (*GetAllAssistantRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllAssistantRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllAssistantRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

type GetAllAssistantTelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginate  *Paginate            `protobuf:"bytes,1,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias []*Criteria          `protobuf:"bytes,2,rep,name=criterias,proto3" json:"criterias,omitempty"`
	Assistant *AssistantDefinition `protobuf:"bytes,3,opt,name=assistant,proto3" json:"assistant,omitempty"`
}

func (x *GetAllAssistantTelemetryRequest) Reset() {
	*x = GetAllAssistantTelemetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssistantTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssistantTelemetryRequest) ProtoMessage() {}

func (x *GetAllAssistantTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssistantTelemetryRequest.ProtoReflect.Descriptor instead.
func (*GetAllAssistantTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllAssistantTelemetryRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllAssistantTelemetryRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

func (x *GetAllAssistantTelemetryRequest) GetAssistant() *AssistantDefinition {
	if x != nil {
		return x.Assistant
	}
	return nil
}

type GetAllAssistantTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*Telemetry `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated   `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllAssistantTelemetryResponse) Reset() {
	*x = GetAllAssistantTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssistantTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssistantTelemetryResponse) ProtoMessage() {}

func (x *GetAllAssistantTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssistantTelemetryResponse.ProtoReflect.Descriptor instead.
func (*GetAllAssistantTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllAssistantTelemetryResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllAssistantTelemetryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllAssistantTelemetryResponse) GetData() []*Telemetry {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllAssistantTelemetryResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllAssistantTelemetryResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type GetAllAssistantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*Assistant `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated   `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllAssistantResponse) Reset() {
	*x = GetAllAssistantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssistantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssistantResponse) ProtoMessage() {}

func (x *GetAllAssistantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssistantResponse.ProtoReflect.Descriptor instead.
func (*GetAllAssistantResponse) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllAssistantResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllAssistantResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllAssistantResponse) GetData() []*Assistant {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllAssistantResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllAssistantResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type GetAllAssistantMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginate    *Paginate        `protobuf:"bytes,1,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias   []*Criteria      `protobuf:"bytes,2,rep,name=criterias,proto3" json:"criterias,omitempty"`
	AssistantId uint64           `protobuf:"varint,3,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Order       *Ordering        `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	Selectors   []*FieldSelector `protobuf:"bytes,6,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *GetAllAssistantMessageRequest) Reset() {
	*x = GetAllAssistantMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssistantMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssistantMessageRequest) ProtoMessage() {}

func (x *GetAllAssistantMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssistantMessageRequest.ProtoReflect.Descriptor instead.
func (*GetAllAssistantMessageRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllAssistantMessageRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllAssistantMessageRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

func (x *GetAllAssistantMessageRequest) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *GetAllAssistantMessageRequest) GetOrder() *Ordering {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *GetAllAssistantMessageRequest) GetSelectors() []*FieldSelector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type GetAllAssistantMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*AssistantConversationMessage `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error                          `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated                      `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllAssistantMessageResponse) Reset() {
	*x = GetAllAssistantMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssistantMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssistantMessageResponse) ProtoMessage() {}

func (x *GetAllAssistantMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssistantMessageResponse.ProtoReflect.Descriptor instead.
func (*GetAllAssistantMessageResponse) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetAllAssistantMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllAssistantMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllAssistantMessageResponse) GetData() []*AssistantConversationMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllAssistantMessageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllAssistantMessageResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type GetAllMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginate  *Paginate        `protobuf:"bytes,1,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias []*Criteria      `protobuf:"bytes,2,rep,name=criterias,proto3" json:"criterias,omitempty"`
	Order     *Ordering        `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	Selectors []*FieldSelector `protobuf:"bytes,6,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *GetAllMessageRequest) Reset() {
	*x = GetAllMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMessageRequest) ProtoMessage() {}

func (x *GetAllMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMessageRequest.ProtoReflect.Descriptor instead.
func (*GetAllMessageRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetAllMessageRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllMessageRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

func (x *GetAllMessageRequest) GetOrder() *Ordering {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *GetAllMessageRequest) GetSelectors() []*FieldSelector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type GetAllMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*AssistantConversationMessage `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error                          `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated                      `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllMessageResponse) Reset() {
	*x = GetAllMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMessageResponse) ProtoMessage() {}

func (x *GetAllMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMessageResponse.ProtoReflect.Descriptor instead.
func (*GetAllMessageResponse) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllMessageResponse) GetData() []*AssistantConversationMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllMessageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllMessageResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type UpdateAssistantDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistantId uint64 `protobuf:"varint,1,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateAssistantDetailRequest) Reset() {
	*x = UpdateAssistantDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssistantDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssistantDetailRequest) ProtoMessage() {}

func (x *UpdateAssistantDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssistantDetailRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssistantDetailRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateAssistantDetailRequest) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *UpdateAssistantDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAssistantDetailRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetAssistantConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistantId uint64           `protobuf:"varint,1,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Id          uint64           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Selectors   []*FieldSelector `protobuf:"bytes,5,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *GetAssistantConversationRequest) Reset() {
	*x = GetAssistantConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantConversationRequest) ProtoMessage() {}

func (x *GetAssistantConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantConversationRequest.ProtoReflect.Descriptor instead.
func (*GetAssistantConversationRequest) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetAssistantConversationRequest) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *GetAssistantConversationRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAssistantConversationRequest) GetSelectors() []*FieldSelector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type GetAssistantConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *AssistantConversation `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAssistantConversationResponse) Reset() {
	*x = GetAssistantConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_assistant_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssistantConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssistantConversationResponse) ProtoMessage() {}

func (x *GetAssistantConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_assistant_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssistantConversationResponse.ProtoReflect.Descriptor instead.
func (*GetAssistantConversationResponse) Descriptor() ([]byte, []int) {
	return file_assistant_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetAssistantConversationResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAssistantConversationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAssistantConversationResponse) GetData() *AssistantConversation {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAssistantConversationResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_assistant_api_proto protoreflect.FileDescriptor

var file_assistant_api_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x2d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x0d,
	0x0a, 0x09, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x10, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x13, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x13, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x16, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x16,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x66, 0x0a, 0x19, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x6b, 0x69, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x6b, 0x69, 0x74, 0x52, 0x19, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x6b, 0x69, 0x74, 0x12, 0x69,
	0x0a, 0x1a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x1a, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x04, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x27, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x12, 0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x68, 0x61, 0x74, 0x73, 0x61,
	0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x77, 0x68,
	0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x5d, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x77, 0x65, 0x62, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x4b, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x41, 0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x61,
	0x70, 0x69, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x16,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x11,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x11, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x25, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f,
	0x6c, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c,
	0x73, 0x22, 0xf8, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x11,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x13, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x5d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x90, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x22, 0xa5, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x73, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x22, 0xbd, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x22, 0xe4, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x7a,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x32, 0xb4, 0x22, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x2e, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x2f,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x2c, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12,
	0x29, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x29, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x2c, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12,
	0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x12, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x29,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x29,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x29, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x29, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2b,
	0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x78, 0x61, 0x74, 0x69, 0x63,
	0x2f, 0x77, 0x65, 0x62, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x65, 0x78, 0x61, 0x74, 0x69, 0x63, 0x2d, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_assistant_api_proto_rawDescOnce sync.Once
	file_assistant_api_proto_rawDescData = file_assistant_api_proto_rawDesc
)

func file_assistant_api_proto_rawDescGZIP() []byte {
	file_assistant_api_proto_rawDescOnce.Do(func() {
		file_assistant_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_assistant_api_proto_rawDescData)
	})
	return file_assistant_api_proto_rawDescData
}

var file_assistant_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_assistant_api_proto_goTypes = []any{
	(*Assistant)(nil),                           // 0: assistant_api.Assistant
	(*CreateAssistantRequest)(nil),              // 1: assistant_api.CreateAssistantRequest
	(*CreateAssistantTagRequest)(nil),           // 2: assistant_api.CreateAssistantTagRequest
	(*GetAssistantRequest)(nil),                 // 3: assistant_api.GetAssistantRequest
	(*DeleteAssistantRequest)(nil),              // 4: assistant_api.DeleteAssistantRequest
	(*GetAssistantResponse)(nil),                // 5: assistant_api.GetAssistantResponse
	(*GetAllAssistantRequest)(nil),              // 6: assistant_api.GetAllAssistantRequest
	(*GetAllAssistantTelemetryRequest)(nil),     // 7: assistant_api.GetAllAssistantTelemetryRequest
	(*GetAllAssistantTelemetryResponse)(nil),    // 8: assistant_api.GetAllAssistantTelemetryResponse
	(*GetAllAssistantResponse)(nil),             // 9: assistant_api.GetAllAssistantResponse
	(*GetAllAssistantMessageRequest)(nil),       // 10: assistant_api.GetAllAssistantMessageRequest
	(*GetAllAssistantMessageResponse)(nil),      // 11: assistant_api.GetAllAssistantMessageResponse
	(*GetAllMessageRequest)(nil),                // 12: assistant_api.GetAllMessageRequest
	(*GetAllMessageResponse)(nil),               // 13: assistant_api.GetAllMessageResponse
	(*UpdateAssistantDetailRequest)(nil),        // 14: assistant_api.UpdateAssistantDetailRequest
	(*GetAssistantConversationRequest)(nil),     // 15: assistant_api.GetAssistantConversationRequest
	(*GetAssistantConversationResponse)(nil),    // 16: assistant_api.GetAssistantConversationResponse
	(*AssistantProviderModel)(nil),              // 17: assistant_api.AssistantProviderModel
	(*AssistantProviderAgentkit)(nil),           // 18: assistant_api.AssistantProviderAgentkit
	(*AssistantProviderWebsocket)(nil),          // 19: assistant_api.AssistantProviderWebsocket
	(*Tag)(nil),                                 // 20: Tag
	(*User)(nil),                                // 21: User
	(*timestamppb.Timestamp)(nil),               // 22: google.protobuf.Timestamp
	(*AssistantDebuggerDeployment)(nil),         // 23: assistant_api.AssistantDebuggerDeployment
	(*AssistantPhoneDeployment)(nil),            // 24: assistant_api.AssistantPhoneDeployment
	(*AssistantWhatsappDeployment)(nil),         // 25: assistant_api.AssistantWhatsappDeployment
	(*AssistantWebpluginDeployment)(nil),        // 26: assistant_api.AssistantWebpluginDeployment
	(*AssistantApiDeployment)(nil),              // 27: assistant_api.AssistantApiDeployment
	(*AssistantConversation)(nil),               // 28: AssistantConversation
	(*AssistantWebhook)(nil),                    // 29: assistant_api.AssistantWebhook
	(*AssistantTool)(nil),                       // 30: assistant_api.AssistantTool
	(*CreateAssistantProviderRequest)(nil),      // 31: assistant_api.CreateAssistantProviderRequest
	(*CreateAssistantKnowledgeRequest)(nil),     // 32: assistant_api.CreateAssistantKnowledgeRequest
	(*CreateAssistantToolRequest)(nil),          // 33: assistant_api.CreateAssistantToolRequest
	(*AssistantDefinition)(nil),                 // 34: AssistantDefinition
	(*Error)(nil),                               // 35: Error
	(*Paginate)(nil),                            // 36: Paginate
	(*Criteria)(nil),                            // 37: Criteria
	(*Telemetry)(nil),                           // 38: Telemetry
	(*Paginated)(nil),                           // 39: Paginated
	(*Ordering)(nil),                            // 40: Ordering
	(*FieldSelector)(nil),                       // 41: FieldSelector
	(*AssistantConversationMessage)(nil),        // 42: AssistantConversationMessage
	(*GetAllAssistantProviderRequest)(nil),      // 43: assistant_api.GetAllAssistantProviderRequest
	(*UpdateAssistantVersionRequest)(nil),       // 44: assistant_api.UpdateAssistantVersionRequest
	(*GetAllConversationMessageRequest)(nil),    // 45: GetAllConversationMessageRequest
	(*GetAllAssistantConversationRequest)(nil),  // 46: GetAllAssistantConversationRequest
	(*GetAssistantWebhookLogRequest)(nil),       // 47: assistant_api.GetAssistantWebhookLogRequest
	(*GetAllAssistantWebhookLogRequest)(nil),    // 48: assistant_api.GetAllAssistantWebhookLogRequest
	(*GetAllAssistantWebhookRequest)(nil),       // 49: assistant_api.GetAllAssistantWebhookRequest
	(*GetAssistantWebhookRequest)(nil),          // 50: assistant_api.GetAssistantWebhookRequest
	(*CreateAssistantWebhookRequest)(nil),       // 51: assistant_api.CreateAssistantWebhookRequest
	(*UpdateAssistantWebhookRequest)(nil),       // 52: assistant_api.UpdateAssistantWebhookRequest
	(*DeleteAssistantWebhookRequest)(nil),       // 53: assistant_api.DeleteAssistantWebhookRequest
	(*GetAssistantToolLogRequest)(nil),          // 54: assistant_api.GetAssistantToolLogRequest
	(*GetAllAssistantToolLogRequest)(nil),       // 55: assistant_api.GetAllAssistantToolLogRequest
	(*GetAssistantAnalysisRequest)(nil),         // 56: assistant_api.GetAssistantAnalysisRequest
	(*UpdateAssistantAnalysisRequest)(nil),      // 57: assistant_api.UpdateAssistantAnalysisRequest
	(*CreateAssistantAnalysisRequest)(nil),      // 58: assistant_api.CreateAssistantAnalysisRequest
	(*DeleteAssistantAnalysisRequest)(nil),      // 59: assistant_api.DeleteAssistantAnalysisRequest
	(*GetAllAssistantAnalysisRequest)(nil),      // 60: assistant_api.GetAllAssistantAnalysisRequest
	(*GetAssistantToolRequest)(nil),             // 61: assistant_api.GetAssistantToolRequest
	(*GetAllAssistantToolRequest)(nil),          // 62: assistant_api.GetAllAssistantToolRequest
	(*DeleteAssistantToolRequest)(nil),          // 63: assistant_api.DeleteAssistantToolRequest
	(*UpdateAssistantToolRequest)(nil),          // 64: assistant_api.UpdateAssistantToolRequest
	(*GetAssistantKnowledgeRequest)(nil),        // 65: assistant_api.GetAssistantKnowledgeRequest
	(*GetAllAssistantKnowledgeRequest)(nil),     // 66: assistant_api.GetAllAssistantKnowledgeRequest
	(*DeleteAssistantKnowledgeRequest)(nil),     // 67: assistant_api.DeleteAssistantKnowledgeRequest
	(*UpdateAssistantKnowledgeRequest)(nil),     // 68: assistant_api.UpdateAssistantKnowledgeRequest
	(*GetAllAssistantProviderResponse)(nil),     // 69: assistant_api.GetAllAssistantProviderResponse
	(*GetAssistantProviderResponse)(nil),        // 70: assistant_api.GetAssistantProviderResponse
	(*GetAllConversationMessageResponse)(nil),   // 71: GetAllConversationMessageResponse
	(*GetAllAssistantConversationResponse)(nil), // 72: GetAllAssistantConversationResponse
	(*GetAssistantWebhookLogResponse)(nil),      // 73: assistant_api.GetAssistantWebhookLogResponse
	(*GetAllAssistantWebhookLogResponse)(nil),   // 74: assistant_api.GetAllAssistantWebhookLogResponse
	(*GetAllAssistantWebhookResponse)(nil),      // 75: assistant_api.GetAllAssistantWebhookResponse
	(*GetAssistantWebhookResponse)(nil),         // 76: assistant_api.GetAssistantWebhookResponse
	(*GetAssistantToolLogResponse)(nil),         // 77: assistant_api.GetAssistantToolLogResponse
	(*GetAllAssistantToolLogResponse)(nil),      // 78: assistant_api.GetAllAssistantToolLogResponse
	(*GetAssistantAnalysisResponse)(nil),        // 79: assistant_api.GetAssistantAnalysisResponse
	(*GetAllAssistantAnalysisResponse)(nil),     // 80: assistant_api.GetAllAssistantAnalysisResponse
	(*GetAssistantToolResponse)(nil),            // 81: assistant_api.GetAssistantToolResponse
	(*GetAllAssistantToolResponse)(nil),         // 82: assistant_api.GetAllAssistantToolResponse
	(*GetAssistantKnowledgeResponse)(nil),       // 83: assistant_api.GetAssistantKnowledgeResponse
	(*GetAllAssistantKnowledgeResponse)(nil),    // 84: assistant_api.GetAllAssistantKnowledgeResponse
}
var file_assistant_api_proto_depIdxs = []int32{
	17, // 0: assistant_api.Assistant.assistantProviderModel:type_name -> assistant_api.AssistantProviderModel
	18, // 1: assistant_api.Assistant.assistantProviderAgentkit:type_name -> assistant_api.AssistantProviderAgentkit
	19, // 2: assistant_api.Assistant.assistantProviderWebsocket:type_name -> assistant_api.AssistantProviderWebsocket
	20, // 3: assistant_api.Assistant.assistantTag:type_name -> Tag
	21, // 4: assistant_api.Assistant.createdUser:type_name -> User
	21, // 5: assistant_api.Assistant.updatedUser:type_name -> User
	22, // 6: assistant_api.Assistant.createdDate:type_name -> google.protobuf.Timestamp
	22, // 7: assistant_api.Assistant.updatedDate:type_name -> google.protobuf.Timestamp
	23, // 8: assistant_api.Assistant.debuggerDeployment:type_name -> assistant_api.AssistantDebuggerDeployment
	24, // 9: assistant_api.Assistant.phoneDeployment:type_name -> assistant_api.AssistantPhoneDeployment
	25, // 10: assistant_api.Assistant.whatsappDeployment:type_name -> assistant_api.AssistantWhatsappDeployment
	26, // 11: assistant_api.Assistant.webPluginDeployment:type_name -> assistant_api.AssistantWebpluginDeployment
	27, // 12: assistant_api.Assistant.apiDeployment:type_name -> assistant_api.AssistantApiDeployment
	28, // 13: assistant_api.Assistant.assistantConversations:type_name -> AssistantConversation
	29, // 14: assistant_api.Assistant.assistantWebhooks:type_name -> assistant_api.AssistantWebhook
	30, // 15: assistant_api.Assistant.assistantTools:type_name -> assistant_api.AssistantTool
	31, // 16: assistant_api.CreateAssistantRequest.assistantProvider:type_name -> assistant_api.CreateAssistantProviderRequest
	32, // 17: assistant_api.CreateAssistantRequest.assistantKnowledges:type_name -> assistant_api.CreateAssistantKnowledgeRequest
	33, // 18: assistant_api.CreateAssistantRequest.assistantTools:type_name -> assistant_api.CreateAssistantToolRequest
	34, // 19: assistant_api.GetAssistantRequest.assistantDefinition:type_name -> AssistantDefinition
	0,  // 20: assistant_api.GetAssistantResponse.data:type_name -> assistant_api.Assistant
	35, // 21: assistant_api.GetAssistantResponse.error:type_name -> Error
	36, // 22: assistant_api.GetAllAssistantRequest.paginate:type_name -> Paginate
	37, // 23: assistant_api.GetAllAssistantRequest.criterias:type_name -> Criteria
	36, // 24: assistant_api.GetAllAssistantTelemetryRequest.paginate:type_name -> Paginate
	37, // 25: assistant_api.GetAllAssistantTelemetryRequest.criterias:type_name -> Criteria
	34, // 26: assistant_api.GetAllAssistantTelemetryRequest.assistant:type_name -> AssistantDefinition
	38, // 27: assistant_api.GetAllAssistantTelemetryResponse.data:type_name -> Telemetry
	35, // 28: assistant_api.GetAllAssistantTelemetryResponse.error:type_name -> Error
	39, // 29: assistant_api.GetAllAssistantTelemetryResponse.paginated:type_name -> Paginated
	0,  // 30: assistant_api.GetAllAssistantResponse.data:type_name -> assistant_api.Assistant
	35, // 31: assistant_api.GetAllAssistantResponse.error:type_name -> Error
	39, // 32: assistant_api.GetAllAssistantResponse.paginated:type_name -> Paginated
	36, // 33: assistant_api.GetAllAssistantMessageRequest.paginate:type_name -> Paginate
	37, // 34: assistant_api.GetAllAssistantMessageRequest.criterias:type_name -> Criteria
	40, // 35: assistant_api.GetAllAssistantMessageRequest.order:type_name -> Ordering
	41, // 36: assistant_api.GetAllAssistantMessageRequest.selectors:type_name -> FieldSelector
	42, // 37: assistant_api.GetAllAssistantMessageResponse.data:type_name -> AssistantConversationMessage
	35, // 38: assistant_api.GetAllAssistantMessageResponse.error:type_name -> Error
	39, // 39: assistant_api.GetAllAssistantMessageResponse.paginated:type_name -> Paginated
	36, // 40: assistant_api.GetAllMessageRequest.paginate:type_name -> Paginate
	37, // 41: assistant_api.GetAllMessageRequest.criterias:type_name -> Criteria
	40, // 42: assistant_api.GetAllMessageRequest.order:type_name -> Ordering
	41, // 43: assistant_api.GetAllMessageRequest.selectors:type_name -> FieldSelector
	42, // 44: assistant_api.GetAllMessageResponse.data:type_name -> AssistantConversationMessage
	35, // 45: assistant_api.GetAllMessageResponse.error:type_name -> Error
	39, // 46: assistant_api.GetAllMessageResponse.paginated:type_name -> Paginated
	41, // 47: assistant_api.GetAssistantConversationRequest.selectors:type_name -> FieldSelector
	28, // 48: assistant_api.GetAssistantConversationResponse.data:type_name -> AssistantConversation
	35, // 49: assistant_api.GetAssistantConversationResponse.error:type_name -> Error
	3,  // 50: assistant_api.AssistantService.GetAssistant:input_type -> assistant_api.GetAssistantRequest
	6,  // 51: assistant_api.AssistantService.GetAllAssistant:input_type -> assistant_api.GetAllAssistantRequest
	1,  // 52: assistant_api.AssistantService.CreateAssistant:input_type -> assistant_api.CreateAssistantRequest
	4,  // 53: assistant_api.AssistantService.DeleteAssistant:input_type -> assistant_api.DeleteAssistantRequest
	43, // 54: assistant_api.AssistantService.GetAllAssistantProvider:input_type -> assistant_api.GetAllAssistantProviderRequest
	31, // 55: assistant_api.AssistantService.CreateAssistantProvider:input_type -> assistant_api.CreateAssistantProviderRequest
	2,  // 56: assistant_api.AssistantService.CreateAssistantTag:input_type -> assistant_api.CreateAssistantTagRequest
	44, // 57: assistant_api.AssistantService.UpdateAssistantVersion:input_type -> assistant_api.UpdateAssistantVersionRequest
	14, // 58: assistant_api.AssistantService.UpdateAssistantDetail:input_type -> assistant_api.UpdateAssistantDetailRequest
	10, // 59: assistant_api.AssistantService.GetAllAssistantMessage:input_type -> assistant_api.GetAllAssistantMessageRequest
	45, // 60: assistant_api.AssistantService.GetAllConversationMessage:input_type -> GetAllConversationMessageRequest
	12, // 61: assistant_api.AssistantService.GetAllMessage:input_type -> assistant_api.GetAllMessageRequest
	7,  // 62: assistant_api.AssistantService.GetAllAssistantTelemetry:input_type -> assistant_api.GetAllAssistantTelemetryRequest
	46, // 63: assistant_api.AssistantService.GetAllAssistantConversation:input_type -> GetAllAssistantConversationRequest
	15, // 64: assistant_api.AssistantService.GetAssistantConversation:input_type -> assistant_api.GetAssistantConversationRequest
	47, // 65: assistant_api.AssistantService.GetAssistantWebhookLog:input_type -> assistant_api.GetAssistantWebhookLogRequest
	48, // 66: assistant_api.AssistantService.GetAllAssistantWebhookLog:input_type -> assistant_api.GetAllAssistantWebhookLogRequest
	49, // 67: assistant_api.AssistantService.GetAllAssistantWebhook:input_type -> assistant_api.GetAllAssistantWebhookRequest
	50, // 68: assistant_api.AssistantService.GetAssistantWebhook:input_type -> assistant_api.GetAssistantWebhookRequest
	51, // 69: assistant_api.AssistantService.CreateAssistantWebhook:input_type -> assistant_api.CreateAssistantWebhookRequest
	52, // 70: assistant_api.AssistantService.UpdateAssistantWebhook:input_type -> assistant_api.UpdateAssistantWebhookRequest
	53, // 71: assistant_api.AssistantService.DeleteAssistantWebhook:input_type -> assistant_api.DeleteAssistantWebhookRequest
	54, // 72: assistant_api.AssistantService.GetAssistantToolLog:input_type -> assistant_api.GetAssistantToolLogRequest
	55, // 73: assistant_api.AssistantService.GetAllAssistantToolLog:input_type -> assistant_api.GetAllAssistantToolLogRequest
	56, // 74: assistant_api.AssistantService.GetAssistantAnalysis:input_type -> assistant_api.GetAssistantAnalysisRequest
	57, // 75: assistant_api.AssistantService.UpdateAssistantAnalysis:input_type -> assistant_api.UpdateAssistantAnalysisRequest
	58, // 76: assistant_api.AssistantService.CreateAssistantAnalysis:input_type -> assistant_api.CreateAssistantAnalysisRequest
	59, // 77: assistant_api.AssistantService.DeleteAssistantAnalysis:input_type -> assistant_api.DeleteAssistantAnalysisRequest
	60, // 78: assistant_api.AssistantService.GetAllAssistantAnalysis:input_type -> assistant_api.GetAllAssistantAnalysisRequest
	33, // 79: assistant_api.AssistantService.CreateAssistantTool:input_type -> assistant_api.CreateAssistantToolRequest
	61, // 80: assistant_api.AssistantService.GetAssistantTool:input_type -> assistant_api.GetAssistantToolRequest
	62, // 81: assistant_api.AssistantService.GetAllAssistantTool:input_type -> assistant_api.GetAllAssistantToolRequest
	63, // 82: assistant_api.AssistantService.DeleteAssistantTool:input_type -> assistant_api.DeleteAssistantToolRequest
	64, // 83: assistant_api.AssistantService.UpdateAssistantTool:input_type -> assistant_api.UpdateAssistantToolRequest
	32, // 84: assistant_api.AssistantService.CreateAssistantKnowledge:input_type -> assistant_api.CreateAssistantKnowledgeRequest
	65, // 85: assistant_api.AssistantService.GetAssistantKnowledge:input_type -> assistant_api.GetAssistantKnowledgeRequest
	66, // 86: assistant_api.AssistantService.GetAllAssistantKnowledge:input_type -> assistant_api.GetAllAssistantKnowledgeRequest
	67, // 87: assistant_api.AssistantService.DeleteAssistantKnowledge:input_type -> assistant_api.DeleteAssistantKnowledgeRequest
	68, // 88: assistant_api.AssistantService.UpdateAssistantKnowledge:input_type -> assistant_api.UpdateAssistantKnowledgeRequest
	5,  // 89: assistant_api.AssistantService.GetAssistant:output_type -> assistant_api.GetAssistantResponse
	9,  // 90: assistant_api.AssistantService.GetAllAssistant:output_type -> assistant_api.GetAllAssistantResponse
	5,  // 91: assistant_api.AssistantService.CreateAssistant:output_type -> assistant_api.GetAssistantResponse
	5,  // 92: assistant_api.AssistantService.DeleteAssistant:output_type -> assistant_api.GetAssistantResponse
	69, // 93: assistant_api.AssistantService.GetAllAssistantProvider:output_type -> assistant_api.GetAllAssistantProviderResponse
	70, // 94: assistant_api.AssistantService.CreateAssistantProvider:output_type -> assistant_api.GetAssistantProviderResponse
	5,  // 95: assistant_api.AssistantService.CreateAssistantTag:output_type -> assistant_api.GetAssistantResponse
	5,  // 96: assistant_api.AssistantService.UpdateAssistantVersion:output_type -> assistant_api.GetAssistantResponse
	5,  // 97: assistant_api.AssistantService.UpdateAssistantDetail:output_type -> assistant_api.GetAssistantResponse
	11, // 98: assistant_api.AssistantService.GetAllAssistantMessage:output_type -> assistant_api.GetAllAssistantMessageResponse
	71, // 99: assistant_api.AssistantService.GetAllConversationMessage:output_type -> GetAllConversationMessageResponse
	13, // 100: assistant_api.AssistantService.GetAllMessage:output_type -> assistant_api.GetAllMessageResponse
	8,  // 101: assistant_api.AssistantService.GetAllAssistantTelemetry:output_type -> assistant_api.GetAllAssistantTelemetryResponse
	72, // 102: assistant_api.AssistantService.GetAllAssistantConversation:output_type -> GetAllAssistantConversationResponse
	16, // 103: assistant_api.AssistantService.GetAssistantConversation:output_type -> assistant_api.GetAssistantConversationResponse
	73, // 104: assistant_api.AssistantService.GetAssistantWebhookLog:output_type -> assistant_api.GetAssistantWebhookLogResponse
	74, // 105: assistant_api.AssistantService.GetAllAssistantWebhookLog:output_type -> assistant_api.GetAllAssistantWebhookLogResponse
	75, // 106: assistant_api.AssistantService.GetAllAssistantWebhook:output_type -> assistant_api.GetAllAssistantWebhookResponse
	76, // 107: assistant_api.AssistantService.GetAssistantWebhook:output_type -> assistant_api.GetAssistantWebhookResponse
	76, // 108: assistant_api.AssistantService.CreateAssistantWebhook:output_type -> assistant_api.GetAssistantWebhookResponse
	76, // 109: assistant_api.AssistantService.UpdateAssistantWebhook:output_type -> assistant_api.GetAssistantWebhookResponse
	76, // 110: assistant_api.AssistantService.DeleteAssistantWebhook:output_type -> assistant_api.GetAssistantWebhookResponse
	77, // 111: assistant_api.AssistantService.GetAssistantToolLog:output_type -> assistant_api.GetAssistantToolLogResponse
	78, // 112: assistant_api.AssistantService.GetAllAssistantToolLog:output_type -> assistant_api.GetAllAssistantToolLogResponse
	79, // 113: assistant_api.AssistantService.GetAssistantAnalysis:output_type -> assistant_api.GetAssistantAnalysisResponse
	79, // 114: assistant_api.AssistantService.UpdateAssistantAnalysis:output_type -> assistant_api.GetAssistantAnalysisResponse
	79, // 115: assistant_api.AssistantService.CreateAssistantAnalysis:output_type -> assistant_api.GetAssistantAnalysisResponse
	79, // 116: assistant_api.AssistantService.DeleteAssistantAnalysis:output_type -> assistant_api.GetAssistantAnalysisResponse
	80, // 117: assistant_api.AssistantService.GetAllAssistantAnalysis:output_type -> assistant_api.GetAllAssistantAnalysisResponse
	81, // 118: assistant_api.AssistantService.CreateAssistantTool:output_type -> assistant_api.GetAssistantToolResponse
	81, // 119: assistant_api.AssistantService.GetAssistantTool:output_type -> assistant_api.GetAssistantToolResponse
	82, // 120: assistant_api.AssistantService.GetAllAssistantTool:output_type -> assistant_api.GetAllAssistantToolResponse
	81, // 121: assistant_api.AssistantService.DeleteAssistantTool:output_type -> assistant_api.GetAssistantToolResponse
	81, // 122: assistant_api.AssistantService.UpdateAssistantTool:output_type -> assistant_api.GetAssistantToolResponse
	83, // 123: assistant_api.AssistantService.CreateAssistantKnowledge:output_type -> assistant_api.GetAssistantKnowledgeResponse
	83, // 124: assistant_api.AssistantService.GetAssistantKnowledge:output_type -> assistant_api.GetAssistantKnowledgeResponse
	84, // 125: assistant_api.AssistantService.GetAllAssistantKnowledge:output_type -> assistant_api.GetAllAssistantKnowledgeResponse
	83, // 126: assistant_api.AssistantService.DeleteAssistantKnowledge:output_type -> assistant_api.GetAssistantKnowledgeResponse
	83, // 127: assistant_api.AssistantService.UpdateAssistantKnowledge:output_type -> assistant_api.GetAssistantKnowledgeResponse
	89, // [89:128] is the sub-list for method output_type
	50, // [50:89] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_assistant_api_proto_init() }
func file_assistant_api_proto_init() {
	if File_assistant_api_proto != nil {
		return
	}
	file_common_proto_init()
	file_assistant_deployment_proto_init()
	file_assistant_tool_proto_init()
	file_assistant_analysis_proto_init()
	file_assistant_webhook_proto_init()
	file_assistant_knowledge_proto_init()
	file_assistant_provider_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_assistant_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Assistant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAssistantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAssistantTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAssistantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllAssistantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllAssistantTelemetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllAssistantTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllAssistantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllAssistantMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllAssistantMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAssistantDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_assistant_api_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetAssistantConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_assistant_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_assistant_api_proto_goTypes,
		DependencyIndexes: file_assistant_api_proto_depIdxs,
		MessageInfos:      file_assistant_api_proto_msgTypes,
	}.Build()
	File_assistant_api_proto = out.File
	file_assistant_api_proto_rawDesc = nil
	file_assistant_api_proto_goTypes = nil
	file_assistant_api_proto_depIdxs = nil
}

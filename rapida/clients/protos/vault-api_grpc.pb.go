// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: vault-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VaultService_CreateProviderCredential_FullMethodName     = "/vault_api.VaultService/CreateProviderCredential"
	VaultService_CreateToolCredential_FullMethodName         = "/vault_api.VaultService/CreateToolCredential"
	VaultService_GetAllOrganizationCredential_FullMethodName = "/vault_api.VaultService/GetAllOrganizationCredential"
	VaultService_DeleteCredential_FullMethodName             = "/vault_api.VaultService/DeleteCredential"
	VaultService_GetProviderCredential_FullMethodName        = "/vault_api.VaultService/GetProviderCredential"
	VaultService_GetCredential_FullMethodName                = "/vault_api.VaultService/GetCredential"
	VaultService_GetOauth2Credential_FullMethodName          = "/vault_api.VaultService/GetOauth2Credential"
)

// VaultServiceClient is the client API for VaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultServiceClient interface {
	CreateProviderCredential(ctx context.Context, in *CreateProviderCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	CreateToolCredential(ctx context.Context, in *CreateToolCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	GetAllOrganizationCredential(ctx context.Context, in *GetAllOrganizationCredentialRequest, opts ...grpc.CallOption) (*GetAllOrganizationCredentialResponse, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	GetProviderCredential(ctx context.Context, in *GetProviderCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
	GetOauth2Credential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error)
}

type vaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultServiceClient(cc grpc.ClientConnInterface) VaultServiceClient {
	return &vaultServiceClient{cc}
}

func (c *vaultServiceClient) CreateProviderCredential(ctx context.Context, in *CreateProviderCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, VaultService_CreateProviderCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) CreateToolCredential(ctx context.Context, in *CreateToolCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, VaultService_CreateToolCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GetAllOrganizationCredential(ctx context.Context, in *GetAllOrganizationCredentialRequest, opts ...grpc.CallOption) (*GetAllOrganizationCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOrganizationCredentialResponse)
	err := c.cc.Invoke(ctx, VaultService_GetAllOrganizationCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, VaultService_DeleteCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GetProviderCredential(ctx context.Context, in *GetProviderCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, VaultService_GetProviderCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GetCredential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, VaultService_GetCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GetOauth2Credential(ctx context.Context, in *GetCredentialRequest, opts ...grpc.CallOption) (*GetCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialResponse)
	err := c.cc.Invoke(ctx, VaultService_GetOauth2Credential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServiceServer is the server API for VaultService service.
// All implementations should embed UnimplementedVaultServiceServer
// for forward compatibility.
type VaultServiceServer interface {
	CreateProviderCredential(context.Context, *CreateProviderCredentialRequest) (*GetCredentialResponse, error)
	CreateToolCredential(context.Context, *CreateToolCredentialRequest) (*GetCredentialResponse, error)
	GetAllOrganizationCredential(context.Context, *GetAllOrganizationCredentialRequest) (*GetAllOrganizationCredentialResponse, error)
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*GetCredentialResponse, error)
	GetProviderCredential(context.Context, *GetProviderCredentialRequest) (*GetCredentialResponse, error)
	GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
	GetOauth2Credential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error)
}

// UnimplementedVaultServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVaultServiceServer struct{}

func (UnimplementedVaultServiceServer) CreateProviderCredential(context.Context, *CreateProviderCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProviderCredential not implemented")
}
func (UnimplementedVaultServiceServer) CreateToolCredential(context.Context, *CreateToolCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToolCredential not implemented")
}
func (UnimplementedVaultServiceServer) GetAllOrganizationCredential(context.Context, *GetAllOrganizationCredentialRequest) (*GetAllOrganizationCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrganizationCredential not implemented")
}
func (UnimplementedVaultServiceServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedVaultServiceServer) GetProviderCredential(context.Context, *GetProviderCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderCredential not implemented")
}
func (UnimplementedVaultServiceServer) GetCredential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedVaultServiceServer) GetOauth2Credential(context.Context, *GetCredentialRequest) (*GetCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOauth2Credential not implemented")
}
func (UnimplementedVaultServiceServer) testEmbeddedByValue() {}

// UnsafeVaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServiceServer will
// result in compilation errors.
type UnsafeVaultServiceServer interface {
	mustEmbedUnimplementedVaultServiceServer()
}

func RegisterVaultServiceServer(s grpc.ServiceRegistrar, srv VaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedVaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VaultService_ServiceDesc, srv)
}

func _VaultService_CreateProviderCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).CreateProviderCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_CreateProviderCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).CreateProviderCredential(ctx, req.(*CreateProviderCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_CreateToolCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateToolCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).CreateToolCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_CreateToolCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).CreateToolCredential(ctx, req.(*CreateToolCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GetAllOrganizationCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrganizationCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GetAllOrganizationCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_GetAllOrganizationCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GetAllOrganizationCredential(ctx, req.(*GetAllOrganizationCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GetProviderCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GetProviderCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_GetProviderCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GetProviderCredential(ctx, req.(*GetProviderCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_GetCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GetCredential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GetOauth2Credential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GetOauth2Credential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_GetOauth2Credential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GetOauth2Credential(ctx, req.(*GetCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VaultService_ServiceDesc is the grpc.ServiceDesc for VaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vault_api.VaultService",
	HandlerType: (*VaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProviderCredential",
			Handler:    _VaultService_CreateProviderCredential_Handler,
		},
		{
			MethodName: "CreateToolCredential",
			Handler:    _VaultService_CreateToolCredential_Handler,
		},
		{
			MethodName: "GetAllOrganizationCredential",
			Handler:    _VaultService_GetAllOrganizationCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _VaultService_DeleteCredential_Handler,
		},
		{
			MethodName: "GetProviderCredential",
			Handler:    _VaultService_GetProviderCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _VaultService_GetCredential_Handler,
		},
		{
			MethodName: "GetOauth2Credential",
			Handler:    _VaultService_GetOauth2Credential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vault-api.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: talk-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TalkService_AssistantTalk_FullMethodName               = "/talk_api.TalkService/AssistantTalk"
	TalkService_GetAllAssistantConversation_FullMethodName = "/talk_api.TalkService/GetAllAssistantConversation"
	TalkService_GetAllConversationMessage_FullMethodName   = "/talk_api.TalkService/GetAllConversationMessage"
	TalkService_CreateMessageMetric_FullMethodName         = "/talk_api.TalkService/CreateMessageMetric"
	TalkService_CreateConversationMetric_FullMethodName    = "/talk_api.TalkService/CreateConversationMetric"
	TalkService_CreatePhoneCall_FullMethodName             = "/talk_api.TalkService/CreatePhoneCall"
	TalkService_CreateBulkPhoneCall_FullMethodName         = "/talk_api.TalkService/CreateBulkPhoneCall"
)

// TalkServiceClient is the client API for TalkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkServiceClient interface {
	AssistantTalk(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AssistantMessagingRequest, AssistantMessagingResponse], error)
	GetAllAssistantConversation(ctx context.Context, in *GetAllAssistantConversationRequest, opts ...grpc.CallOption) (*GetAllAssistantConversationResponse, error)
	GetAllConversationMessage(ctx context.Context, in *GetAllConversationMessageRequest, opts ...grpc.CallOption) (*GetAllConversationMessageResponse, error)
	CreateMessageMetric(ctx context.Context, in *CreateMessageMetricRequest, opts ...grpc.CallOption) (*CreateMessageMetricResponse, error)
	CreateConversationMetric(ctx context.Context, in *CreateConversationMetricRequest, opts ...grpc.CallOption) (*CreateConversationMetricResponse, error)
	CreatePhoneCall(ctx context.Context, in *CreatePhoneCallRequest, opts ...grpc.CallOption) (*CreatePhoneCallResponse, error)
	CreateBulkPhoneCall(ctx context.Context, in *CreateBulkPhoneCallRequest, opts ...grpc.CallOption) (*CreateBulkPhoneCallResponse, error)
}

type talkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkServiceClient(cc grpc.ClientConnInterface) TalkServiceClient {
	return &talkServiceClient{cc}
}

func (c *talkServiceClient) AssistantTalk(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AssistantMessagingRequest, AssistantMessagingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TalkService_ServiceDesc.Streams[0], TalkService_AssistantTalk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AssistantMessagingRequest, AssistantMessagingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TalkService_AssistantTalkClient = grpc.BidiStreamingClient[AssistantMessagingRequest, AssistantMessagingResponse]

func (c *talkServiceClient) GetAllAssistantConversation(ctx context.Context, in *GetAllAssistantConversationRequest, opts ...grpc.CallOption) (*GetAllAssistantConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAssistantConversationResponse)
	err := c.cc.Invoke(ctx, TalkService_GetAllAssistantConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) GetAllConversationMessage(ctx context.Context, in *GetAllConversationMessageRequest, opts ...grpc.CallOption) (*GetAllConversationMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllConversationMessageResponse)
	err := c.cc.Invoke(ctx, TalkService_GetAllConversationMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) CreateMessageMetric(ctx context.Context, in *CreateMessageMetricRequest, opts ...grpc.CallOption) (*CreateMessageMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMessageMetricResponse)
	err := c.cc.Invoke(ctx, TalkService_CreateMessageMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) CreateConversationMetric(ctx context.Context, in *CreateConversationMetricRequest, opts ...grpc.CallOption) (*CreateConversationMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConversationMetricResponse)
	err := c.cc.Invoke(ctx, TalkService_CreateConversationMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) CreatePhoneCall(ctx context.Context, in *CreatePhoneCallRequest, opts ...grpc.CallOption) (*CreatePhoneCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePhoneCallResponse)
	err := c.cc.Invoke(ctx, TalkService_CreatePhoneCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkServiceClient) CreateBulkPhoneCall(ctx context.Context, in *CreateBulkPhoneCallRequest, opts ...grpc.CallOption) (*CreateBulkPhoneCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBulkPhoneCallResponse)
	err := c.cc.Invoke(ctx, TalkService_CreateBulkPhoneCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkServiceServer is the server API for TalkService service.
// All implementations should embed UnimplementedTalkServiceServer
// for forward compatibility.
type TalkServiceServer interface {
	AssistantTalk(grpc.BidiStreamingServer[AssistantMessagingRequest, AssistantMessagingResponse]) error
	GetAllAssistantConversation(context.Context, *GetAllAssistantConversationRequest) (*GetAllAssistantConversationResponse, error)
	GetAllConversationMessage(context.Context, *GetAllConversationMessageRequest) (*GetAllConversationMessageResponse, error)
	CreateMessageMetric(context.Context, *CreateMessageMetricRequest) (*CreateMessageMetricResponse, error)
	CreateConversationMetric(context.Context, *CreateConversationMetricRequest) (*CreateConversationMetricResponse, error)
	CreatePhoneCall(context.Context, *CreatePhoneCallRequest) (*CreatePhoneCallResponse, error)
	CreateBulkPhoneCall(context.Context, *CreateBulkPhoneCallRequest) (*CreateBulkPhoneCallResponse, error)
}

// UnimplementedTalkServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTalkServiceServer struct{}

func (UnimplementedTalkServiceServer) AssistantTalk(grpc.BidiStreamingServer[AssistantMessagingRequest, AssistantMessagingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AssistantTalk not implemented")
}
func (UnimplementedTalkServiceServer) GetAllAssistantConversation(context.Context, *GetAllAssistantConversationRequest) (*GetAllAssistantConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssistantConversation not implemented")
}
func (UnimplementedTalkServiceServer) GetAllConversationMessage(context.Context, *GetAllConversationMessageRequest) (*GetAllConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConversationMessage not implemented")
}
func (UnimplementedTalkServiceServer) CreateMessageMetric(context.Context, *CreateMessageMetricRequest) (*CreateMessageMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessageMetric not implemented")
}
func (UnimplementedTalkServiceServer) CreateConversationMetric(context.Context, *CreateConversationMetricRequest) (*CreateConversationMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversationMetric not implemented")
}
func (UnimplementedTalkServiceServer) CreatePhoneCall(context.Context, *CreatePhoneCallRequest) (*CreatePhoneCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneCall not implemented")
}
func (UnimplementedTalkServiceServer) CreateBulkPhoneCall(context.Context, *CreateBulkPhoneCallRequest) (*CreateBulkPhoneCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulkPhoneCall not implemented")
}
func (UnimplementedTalkServiceServer) testEmbeddedByValue() {}

// UnsafeTalkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalkServiceServer will
// result in compilation errors.
type UnsafeTalkServiceServer interface {
	mustEmbedUnimplementedTalkServiceServer()
}

func RegisterTalkServiceServer(s grpc.ServiceRegistrar, srv TalkServiceServer) {
	// If the following call pancis, it indicates UnimplementedTalkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TalkService_ServiceDesc, srv)
}

func _TalkService_AssistantTalk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TalkServiceServer).AssistantTalk(&grpc.GenericServerStream[AssistantMessagingRequest, AssistantMessagingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TalkService_AssistantTalkServer = grpc.BidiStreamingServer[AssistantMessagingRequest, AssistantMessagingResponse]

func _TalkService_GetAllAssistantConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssistantConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetAllAssistantConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkService_GetAllAssistantConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetAllAssistantConversation(ctx, req.(*GetAllAssistantConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_GetAllConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConversationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).GetAllConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkService_GetAllConversationMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).GetAllConversationMessage(ctx, req.(*GetAllConversationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_CreateMessageMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).CreateMessageMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkService_CreateMessageMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).CreateMessageMetric(ctx, req.(*CreateMessageMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_CreateConversationMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).CreateConversationMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkService_CreateConversationMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).CreateConversationMetric(ctx, req.(*CreateConversationMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_CreatePhoneCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhoneCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).CreatePhoneCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkService_CreatePhoneCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).CreatePhoneCall(ctx, req.(*CreatePhoneCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkService_CreateBulkPhoneCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBulkPhoneCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).CreateBulkPhoneCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkService_CreateBulkPhoneCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).CreateBulkPhoneCall(ctx, req.(*CreateBulkPhoneCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TalkService_ServiceDesc is the grpc.ServiceDesc for TalkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TalkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "talk_api.TalkService",
	HandlerType: (*TalkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAssistantConversation",
			Handler:    _TalkService_GetAllAssistantConversation_Handler,
		},
		{
			MethodName: "GetAllConversationMessage",
			Handler:    _TalkService_GetAllConversationMessage_Handler,
		},
		{
			MethodName: "CreateMessageMetric",
			Handler:    _TalkService_CreateMessageMetric_Handler,
		},
		{
			MethodName: "CreateConversationMetric",
			Handler:    _TalkService_CreateConversationMetric_Handler,
		},
		{
			MethodName: "CreatePhoneCall",
			Handler:    _TalkService_CreatePhoneCall_Handler,
		},
		{
			MethodName: "CreateBulkPhoneCall",
			Handler:    _TalkService_CreateBulkPhoneCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AssistantTalk",
			Handler:       _TalkService_AssistantTalk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "talk-api.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: knowledge-api.proto

package lexatic_backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateKnowledgeDocumentRequest_PRE_PROCESS int32

const (
	CreateKnowledgeDocumentRequest_AUTOMATIC CreateKnowledgeDocumentRequest_PRE_PROCESS = 0
	CreateKnowledgeDocumentRequest_CUSTOM    CreateKnowledgeDocumentRequest_PRE_PROCESS = 1
)

// Enum value maps for CreateKnowledgeDocumentRequest_PRE_PROCESS.
var (
	CreateKnowledgeDocumentRequest_PRE_PROCESS_name = map[int32]string{
		0: "AUTOMATIC",
		1: "CUSTOM",
	}
	CreateKnowledgeDocumentRequest_PRE_PROCESS_value = map[string]int32{
		"AUTOMATIC": 0,
		"CUSTOM":    1,
	}
)

func (x CreateKnowledgeDocumentRequest_PRE_PROCESS) Enum() *CreateKnowledgeDocumentRequest_PRE_PROCESS {
	p := new(CreateKnowledgeDocumentRequest_PRE_PROCESS)
	*p = x
	return p
}

func (x CreateKnowledgeDocumentRequest_PRE_PROCESS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateKnowledgeDocumentRequest_PRE_PROCESS) Descriptor() protoreflect.EnumDescriptor {
	return file_knowledge_api_proto_enumTypes[0].Descriptor()
}

func (CreateKnowledgeDocumentRequest_PRE_PROCESS) Type() protoreflect.EnumType {
	return &file_knowledge_api_proto_enumTypes[0]
}

func (x CreateKnowledgeDocumentRequest_PRE_PROCESS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateKnowledgeDocumentRequest_PRE_PROCESS.Descriptor instead.
func (CreateKnowledgeDocumentRequest_PRE_PROCESS) EnumDescriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{10, 0}
}

type CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE int32

const (
	CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE_MANUAL CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE = 0
	CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE_TOOL   CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE = 1
)

// Enum value maps for CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE.
var (
	CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE_name = map[int32]string{
		0: "DOCUMENT_SOURCE_MANUAL",
		1: "DOCUMENT_SOURCE_TOOL",
	}
	CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE_value = map[string]int32{
		"DOCUMENT_SOURCE_MANUAL": 0,
		"DOCUMENT_SOURCE_TOOL":   1,
	}
)

func (x CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE) Enum() *CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE {
	p := new(CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE)
	*p = x
	return p
}

func (x CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE) Descriptor() protoreflect.EnumDescriptor {
	return file_knowledge_api_proto_enumTypes[1].Descriptor()
}

func (CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE) Type() protoreflect.EnumType {
	return &file_knowledge_api_proto_enumTypes[1]
}

func (x CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE.Descriptor instead.
func (CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE) EnumDescriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{10, 1}
}

type CreateKnowledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                           string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description                    string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tags                           []string    `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Visibility                     string      `protobuf:"bytes,5,opt,name=visibility,proto3" json:"visibility,omitempty"`
	EmbeddingModelProviderId       uint64      `protobuf:"varint,6,opt,name=embeddingModelProviderId,proto3" json:"embeddingModelProviderId,omitempty"`
	EmbeddingModelProviderName     string      `protobuf:"bytes,7,opt,name=embeddingModelProviderName,proto3" json:"embeddingModelProviderName,omitempty"`
	KnowledgeEmbeddingModelOptions []*Metadata `protobuf:"bytes,8,rep,name=knowledgeEmbeddingModelOptions,proto3" json:"knowledgeEmbeddingModelOptions,omitempty"`
}

func (x *CreateKnowledgeRequest) Reset() {
	*x = CreateKnowledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKnowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeRequest) ProtoMessage() {}

func (x *CreateKnowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateKnowledgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateKnowledgeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateKnowledgeRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateKnowledgeRequest) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *CreateKnowledgeRequest) GetEmbeddingModelProviderId() uint64 {
	if x != nil {
		return x.EmbeddingModelProviderId
	}
	return 0
}

func (x *CreateKnowledgeRequest) GetEmbeddingModelProviderName() string {
	if x != nil {
		return x.EmbeddingModelProviderName
	}
	return ""
}

func (x *CreateKnowledgeRequest) GetKnowledgeEmbeddingModelOptions() []*Metadata {
	if x != nil {
		return x.KnowledgeEmbeddingModelOptions
	}
	return nil
}

type CreateKnowledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool       `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *Knowledge `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateKnowledgeResponse) Reset() {
	*x = CreateKnowledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKnowledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeResponse) ProtoMessage() {}

func (x *CreateKnowledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeResponse.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeResponse) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateKnowledgeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateKnowledgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateKnowledgeResponse) GetData() *Knowledge {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateKnowledgeResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAllKnowledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paginate  *Paginate   `protobuf:"bytes,1,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias []*Criteria `protobuf:"bytes,2,rep,name=criterias,proto3" json:"criterias,omitempty"`
}

func (x *GetAllKnowledgeRequest) Reset() {
	*x = GetAllKnowledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKnowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKnowledgeRequest) ProtoMessage() {}

func (x *GetAllKnowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKnowledgeRequest.ProtoReflect.Descriptor instead.
func (*GetAllKnowledgeRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetAllKnowledgeRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllKnowledgeRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

type GetAllKnowledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*Knowledge `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error       `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated   `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllKnowledgeResponse) Reset() {
	*x = GetAllKnowledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKnowledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKnowledgeResponse) ProtoMessage() {}

func (x *GetAllKnowledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKnowledgeResponse.ProtoReflect.Descriptor instead.
func (*GetAllKnowledgeResponse) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllKnowledgeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllKnowledgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllKnowledgeResponse) GetData() []*Knowledge {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllKnowledgeResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllKnowledgeResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type GetKnowledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetKnowledgeRequest) Reset() {
	*x = GetKnowledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKnowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeRequest) ProtoMessage() {}

func (x *GetKnowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetKnowledgeRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetKnowledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool       `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *Knowledge `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetKnowledgeResponse) Reset() {
	*x = GetKnowledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKnowledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeResponse) ProtoMessage() {}

func (x *GetKnowledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeResponse) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetKnowledgeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetKnowledgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetKnowledgeResponse) GetData() *Knowledge {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetKnowledgeResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateKnowledgeTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeId uint64   `protobuf:"varint,1,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	Tags        []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CreateKnowledgeTagRequest) Reset() {
	*x = CreateKnowledgeTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKnowledgeTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeTagRequest) ProtoMessage() {}

func (x *CreateKnowledgeTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeTagRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeTagRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{6}
}

func (x *CreateKnowledgeTagRequest) GetKnowledgeId() uint64 {
	if x != nil {
		return x.KnowledgeId
	}
	return 0
}

func (x *CreateKnowledgeTagRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type KnowledgeDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	KnowledgeId    uint64                 `protobuf:"varint,2,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	Language       string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Name           string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	DocumentSource *structpb.Struct       `protobuf:"bytes,6,opt,name=documentSource,proto3" json:"documentSource,omitempty"`
	DocumentType   string                 `protobuf:"bytes,7,opt,name=documentType,proto3" json:"documentType,omitempty"`
	DocumentSize   uint64                 `protobuf:"varint,8,opt,name=documentSize,proto3" json:"documentSize,omitempty"`
	DocumentPath   string                 `protobuf:"bytes,9,opt,name=documentPath,proto3" json:"documentPath,omitempty"`
	IndexStatus    string                 `protobuf:"bytes,10,opt,name=indexStatus,proto3" json:"indexStatus,omitempty"`
	RetrievalCount uint64                 `protobuf:"varint,12,opt,name=retrievalCount,proto3" json:"retrievalCount,omitempty"`
	TokenCount     uint64                 `protobuf:"varint,13,opt,name=tokenCount,proto3" json:"tokenCount,omitempty"`
	WordCount      uint64                 `protobuf:"varint,14,opt,name=wordCount,proto3" json:"wordCount,omitempty"`
	DisplayStatus  string                 `protobuf:"bytes,19,opt,name=DisplayStatus,proto3" json:"DisplayStatus,omitempty"`
	Status         string                 `protobuf:"bytes,21,opt,name=status,proto3" json:"status,omitempty"`
	CreatedBy      uint64                 `protobuf:"varint,22,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedUser    *User                  `protobuf:"bytes,23,opt,name=createdUser,proto3" json:"createdUser,omitempty"`
	UpdatedBy      uint64                 `protobuf:"varint,24,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	UpdatedUser    *User                  `protobuf:"bytes,25,opt,name=updatedUser,proto3" json:"updatedUser,omitempty"`
	CreatedDate    *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate    *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
}

func (x *KnowledgeDocument) Reset() {
	*x = KnowledgeDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeDocument) ProtoMessage() {}

func (x *KnowledgeDocument) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeDocument.ProtoReflect.Descriptor instead.
func (*KnowledgeDocument) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{7}
}

func (x *KnowledgeDocument) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KnowledgeDocument) GetKnowledgeId() uint64 {
	if x != nil {
		return x.KnowledgeId
	}
	return 0
}

func (x *KnowledgeDocument) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *KnowledgeDocument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KnowledgeDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeDocument) GetDocumentSource() *structpb.Struct {
	if x != nil {
		return x.DocumentSource
	}
	return nil
}

func (x *KnowledgeDocument) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *KnowledgeDocument) GetDocumentSize() uint64 {
	if x != nil {
		return x.DocumentSize
	}
	return 0
}

func (x *KnowledgeDocument) GetDocumentPath() string {
	if x != nil {
		return x.DocumentPath
	}
	return ""
}

func (x *KnowledgeDocument) GetIndexStatus() string {
	if x != nil {
		return x.IndexStatus
	}
	return ""
}

func (x *KnowledgeDocument) GetRetrievalCount() uint64 {
	if x != nil {
		return x.RetrievalCount
	}
	return 0
}

func (x *KnowledgeDocument) GetTokenCount() uint64 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

func (x *KnowledgeDocument) GetWordCount() uint64 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *KnowledgeDocument) GetDisplayStatus() string {
	if x != nil {
		return x.DisplayStatus
	}
	return ""
}

func (x *KnowledgeDocument) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KnowledgeDocument) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *KnowledgeDocument) GetCreatedUser() *User {
	if x != nil {
		return x.CreatedUser
	}
	return nil
}

func (x *KnowledgeDocument) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *KnowledgeDocument) GetUpdatedUser() *User {
	if x != nil {
		return x.UpdatedUser
	}
	return nil
}

func (x *KnowledgeDocument) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *KnowledgeDocument) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

type GetAllKnowledgeDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeId uint64      `protobuf:"varint,1,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	Paginate    *Paginate   `protobuf:"bytes,2,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias   []*Criteria `protobuf:"bytes,3,rep,name=criterias,proto3" json:"criterias,omitempty"`
}

func (x *GetAllKnowledgeDocumentRequest) Reset() {
	*x = GetAllKnowledgeDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKnowledgeDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKnowledgeDocumentRequest) ProtoMessage() {}

func (x *GetAllKnowledgeDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKnowledgeDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetAllKnowledgeDocumentRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllKnowledgeDocumentRequest) GetKnowledgeId() uint64 {
	if x != nil {
		return x.KnowledgeId
	}
	return 0
}

func (x *GetAllKnowledgeDocumentRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllKnowledgeDocumentRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

type GetAllKnowledgeDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*KnowledgeDocument `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error               `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated           `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllKnowledgeDocumentResponse) Reset() {
	*x = GetAllKnowledgeDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKnowledgeDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKnowledgeDocumentResponse) ProtoMessage() {}

func (x *GetAllKnowledgeDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKnowledgeDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetAllKnowledgeDocumentResponse) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllKnowledgeDocumentResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllKnowledgeDocumentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllKnowledgeDocumentResponse) GetData() []*KnowledgeDocument {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllKnowledgeDocumentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllKnowledgeDocumentResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type CreateKnowledgeDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeId       uint64                                         `protobuf:"varint,1,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	DocumentSource    CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE `protobuf:"varint,2,opt,name=documentSource,proto3,enum=knowledge_api.CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE" json:"documentSource,omitempty"`
	DataSource        string                                         `protobuf:"bytes,3,opt,name=dataSource,proto3" json:"dataSource,omitempty"`
	Contents          []*Content                                     `protobuf:"bytes,5,rep,name=contents,proto3" json:"contents,omitempty"`
	PreProcess        CreateKnowledgeDocumentRequest_PRE_PROCESS     `protobuf:"varint,6,opt,name=preProcess,proto3,enum=knowledge_api.CreateKnowledgeDocumentRequest_PRE_PROCESS" json:"preProcess,omitempty"`
	Separator         string                                         `protobuf:"bytes,7,opt,name=separator,proto3" json:"separator,omitempty"`
	MaxChunkSize      uint32                                         `protobuf:"varint,8,opt,name=maxChunkSize,proto3" json:"maxChunkSize,omitempty"`
	ChunkOverlap      uint32                                         `protobuf:"varint,9,opt,name=chunkOverlap,proto3" json:"chunkOverlap,omitempty"`
	Name              string                                         `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                                         `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	DocumentStructure string                                         `protobuf:"bytes,12,opt,name=documentStructure,proto3" json:"documentStructure,omitempty"`
}

func (x *CreateKnowledgeDocumentRequest) Reset() {
	*x = CreateKnowledgeDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKnowledgeDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeDocumentRequest) ProtoMessage() {}

func (x *CreateKnowledgeDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeDocumentRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeDocumentRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{10}
}

func (x *CreateKnowledgeDocumentRequest) GetKnowledgeId() uint64 {
	if x != nil {
		return x.KnowledgeId
	}
	return 0
}

func (x *CreateKnowledgeDocumentRequest) GetDocumentSource() CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE {
	if x != nil {
		return x.DocumentSource
	}
	return CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE_MANUAL
}

func (x *CreateKnowledgeDocumentRequest) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *CreateKnowledgeDocumentRequest) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *CreateKnowledgeDocumentRequest) GetPreProcess() CreateKnowledgeDocumentRequest_PRE_PROCESS {
	if x != nil {
		return x.PreProcess
	}
	return CreateKnowledgeDocumentRequest_AUTOMATIC
}

func (x *CreateKnowledgeDocumentRequest) GetSeparator() string {
	if x != nil {
		return x.Separator
	}
	return ""
}

func (x *CreateKnowledgeDocumentRequest) GetMaxChunkSize() uint32 {
	if x != nil {
		return x.MaxChunkSize
	}
	return 0
}

func (x *CreateKnowledgeDocumentRequest) GetChunkOverlap() uint32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *CreateKnowledgeDocumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateKnowledgeDocumentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateKnowledgeDocumentRequest) GetDocumentStructure() string {
	if x != nil {
		return x.DocumentStructure
	}
	return ""
}

type CreateKnowledgeDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*KnowledgeDocument `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error               `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated           `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *CreateKnowledgeDocumentResponse) Reset() {
	*x = CreateKnowledgeDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKnowledgeDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeDocumentResponse) ProtoMessage() {}

func (x *CreateKnowledgeDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeDocumentResponse.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeDocumentResponse) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{11}
}

func (x *CreateKnowledgeDocumentResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateKnowledgeDocumentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateKnowledgeDocumentResponse) GetData() []*KnowledgeDocument {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateKnowledgeDocumentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateKnowledgeDocumentResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type KnowledgeDocumentSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        string                             `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	DocumentHash string                             `protobuf:"bytes,19,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	DocumentId   string                             `protobuf:"bytes,20,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Text         string                             `protobuf:"bytes,21,opt,name=text,proto3" json:"text,omitempty"`
	Metadata     *KnowledgeDocumentSegment_Metadata `protobuf:"bytes,22,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Entities     *KnowledgeDocumentSegment_Entities `protobuf:"bytes,23,opt,name=entities,proto3" json:"entities,omitempty"`
}

func (x *KnowledgeDocumentSegment) Reset() {
	*x = KnowledgeDocumentSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeDocumentSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeDocumentSegment) ProtoMessage() {}

func (x *KnowledgeDocumentSegment) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeDocumentSegment.ProtoReflect.Descriptor instead.
func (*KnowledgeDocumentSegment) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{12}
}

func (x *KnowledgeDocumentSegment) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *KnowledgeDocumentSegment) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *KnowledgeDocumentSegment) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *KnowledgeDocumentSegment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *KnowledgeDocumentSegment) GetMetadata() *KnowledgeDocumentSegment_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KnowledgeDocumentSegment) GetEntities() *KnowledgeDocumentSegment_Entities {
	if x != nil {
		return x.Entities
	}
	return nil
}

type GetAllKnowledgeDocumentSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeId uint64      `protobuf:"varint,1,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	Paginate    *Paginate   `protobuf:"bytes,3,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias   []*Criteria `protobuf:"bytes,4,rep,name=criterias,proto3" json:"criterias,omitempty"`
}

func (x *GetAllKnowledgeDocumentSegmentRequest) Reset() {
	*x = GetAllKnowledgeDocumentSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKnowledgeDocumentSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKnowledgeDocumentSegmentRequest) ProtoMessage() {}

func (x *GetAllKnowledgeDocumentSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKnowledgeDocumentSegmentRequest.ProtoReflect.Descriptor instead.
func (*GetAllKnowledgeDocumentSegmentRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllKnowledgeDocumentSegmentRequest) GetKnowledgeId() uint64 {
	if x != nil {
		return x.KnowledgeId
	}
	return 0
}

func (x *GetAllKnowledgeDocumentSegmentRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllKnowledgeDocumentSegmentRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

type GetAllKnowledgeDocumentSegmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                        `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*KnowledgeDocumentSegment `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error                      `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated                  `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllKnowledgeDocumentSegmentResponse) Reset() {
	*x = GetAllKnowledgeDocumentSegmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKnowledgeDocumentSegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKnowledgeDocumentSegmentResponse) ProtoMessage() {}

func (x *GetAllKnowledgeDocumentSegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKnowledgeDocumentSegmentResponse.ProtoReflect.Descriptor instead.
func (*GetAllKnowledgeDocumentSegmentResponse) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllKnowledgeDocumentSegmentResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllKnowledgeDocumentSegmentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllKnowledgeDocumentSegmentResponse) GetData() []*KnowledgeDocumentSegment {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllKnowledgeDocumentSegmentResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllKnowledgeDocumentSegmentResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type UpdateKnowledgeDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KnowledgeId uint64 `protobuf:"varint,1,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateKnowledgeDetailRequest) Reset() {
	*x = UpdateKnowledgeDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKnowledgeDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeDetailRequest) ProtoMessage() {}

func (x *UpdateKnowledgeDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeDetailRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeDetailRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateKnowledgeDetailRequest) GetKnowledgeId() uint64 {
	if x != nil {
		return x.KnowledgeId
	}
	return 0
}

func (x *UpdateKnowledgeDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateKnowledgeDetailRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateKnowledgeDocumentSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organizations []string `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
	Dates         []string `protobuf:"bytes,2,rep,name=dates,proto3" json:"dates,omitempty"`
	Products      []string `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`
	Events        []string `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	People        []string `protobuf:"bytes,5,rep,name=people,proto3" json:"people,omitempty"`
	Times         []string `protobuf:"bytes,6,rep,name=times,proto3" json:"times,omitempty"`
	Quantities    []string `protobuf:"bytes,7,rep,name=quantities,proto3" json:"quantities,omitempty"`
	Locations     []string `protobuf:"bytes,8,rep,name=locations,proto3" json:"locations,omitempty"`
	Industries    []string `protobuf:"bytes,9,rep,name=industries,proto3" json:"industries,omitempty"`
	DocumentName string `protobuf:"bytes,10,opt,name=documentName,proto3" json:"documentName,omitempty"`
	DocumentId   string `protobuf:"bytes,11,opt,name=documentId,proto3" json:"documentId,omitempty"`
	Index        string `protobuf:"bytes,12,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *UpdateKnowledgeDocumentSegmentRequest) Reset() {
	*x = UpdateKnowledgeDocumentSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateKnowledgeDocumentSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeDocumentSegmentRequest) ProtoMessage() {}

func (x *UpdateKnowledgeDocumentSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeDocumentSegmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeDocumentSegmentRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetOrganizations() []string {
	if x != nil {
		return x.Organizations
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetDates() []string {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetPeople() []string {
	if x != nil {
		return x.People
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetTimes() []string {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetQuantities() []string {
	if x != nil {
		return x.Quantities
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetIndustries() []string {
	if x != nil {
		return x.Industries
	}
	return nil
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *UpdateKnowledgeDocumentSegmentRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

type DeleteKnowledgeDocumentSegmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId string `protobuf:"bytes,1,opt,name=documentId,proto3" json:"documentId,omitempty"`
	Index      string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Reason     string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *DeleteKnowledgeDocumentSegmentRequest) Reset() {
	*x = DeleteKnowledgeDocumentSegmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKnowledgeDocumentSegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeDocumentSegmentRequest) ProtoMessage() {}

func (x *DeleteKnowledgeDocumentSegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeDocumentSegmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeDocumentSegmentRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteKnowledgeDocumentSegmentRequest) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *DeleteKnowledgeDocumentSegmentRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *DeleteKnowledgeDocumentSegmentRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetAllKnowledgeLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64      `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Paginate  *Paginate   `protobuf:"bytes,3,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias []*Criteria `protobuf:"bytes,4,rep,name=criterias,proto3" json:"criterias,omitempty"`
	Order     *Ordering   `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GetAllKnowledgeLogRequest) Reset() {
	*x = GetAllKnowledgeLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKnowledgeLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKnowledgeLogRequest) ProtoMessage() {}

func (x *GetAllKnowledgeLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKnowledgeLogRequest.ProtoReflect.Descriptor instead.
func (*GetAllKnowledgeLogRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetAllKnowledgeLogRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetAllKnowledgeLogRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllKnowledgeLogRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

func (x *GetAllKnowledgeLogRequest) GetOrder() *Ordering {
	if x != nil {
		return x.Order
	}
	return nil
}

type GetKnowledgeLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint64 `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Id        uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetKnowledgeLogRequest) Reset() {
	*x = GetKnowledgeLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKnowledgeLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeLogRequest) ProtoMessage() {}

func (x *GetKnowledgeLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeLogRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeLogRequest) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetKnowledgeLogRequest) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetKnowledgeLogRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetKnowledgeLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool          `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *KnowledgeLog `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetKnowledgeLogResponse) Reset() {
	*x = GetKnowledgeLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKnowledgeLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeLogResponse) ProtoMessage() {}

func (x *GetKnowledgeLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeLogResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeLogResponse) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetKnowledgeLogResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetKnowledgeLogResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetKnowledgeLogResponse) GetData() *KnowledgeLog {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetKnowledgeLogResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetAllKnowledgeLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*KnowledgeLog `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error          `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated      `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllKnowledgeLogResponse) Reset() {
	*x = GetAllKnowledgeLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKnowledgeLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKnowledgeLogResponse) ProtoMessage() {}

func (x *GetAllKnowledgeLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKnowledgeLogResponse.ProtoReflect.Descriptor instead.
func (*GetAllKnowledgeLogResponse) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{21}
}

func (x *GetAllKnowledgeLogResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllKnowledgeLogResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllKnowledgeLogResponse) GetData() []*KnowledgeLog {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllKnowledgeLogResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllKnowledgeLogResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type KnowledgeLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Action          *structpb.Struct       `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Request         *structpb.Struct       `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Response        *structpb.Struct       `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	Status          string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedDate     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
	KnowledgeId     uint64                 `protobuf:"varint,8,opt,name=knowledgeId,proto3" json:"knowledgeId,omitempty"`
	ProjectId       uint64                 `protobuf:"varint,9,opt,name=projectId,proto3" json:"projectId,omitempty"`
	OrganizationId  uint64                 `protobuf:"varint,10,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	TopK            uint32                 `protobuf:"varint,11,opt,name=topK,proto3" json:"topK,omitempty"`
	ScoreThreshold  float32                `protobuf:"fixed32,12,opt,name=scoreThreshold,proto3" json:"scoreThreshold,omitempty"`
	DocumentCount   uint32                 `protobuf:"varint,13,opt,name=documentCount,proto3" json:"documentCount,omitempty"`
	AssetPrefix     string                 `protobuf:"bytes,14,opt,name=assetPrefix,proto3" json:"assetPrefix,omitempty"`
	RetrievalMethod string                 `protobuf:"bytes,15,opt,name=retrievalMethod,proto3" json:"retrievalMethod,omitempty"`
	TimeTaken       uint64                 `protobuf:"varint,16,opt,name=timeTaken,proto3" json:"timeTaken,omitempty"`
	AdditionalData  map[string]string      `protobuf:"bytes,17,rep,name=additionalData,proto3" json:"additionalData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KnowledgeLog) Reset() {
	*x = KnowledgeLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeLog) ProtoMessage() {}

func (x *KnowledgeLog) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeLog.ProtoReflect.Descriptor instead.
func (*KnowledgeLog) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{22}
}

func (x *KnowledgeLog) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KnowledgeLog) GetAction() *structpb.Struct {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *KnowledgeLog) GetRequest() *structpb.Struct {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *KnowledgeLog) GetResponse() *structpb.Struct {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *KnowledgeLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KnowledgeLog) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *KnowledgeLog) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *KnowledgeLog) GetKnowledgeId() uint64 {
	if x != nil {
		return x.KnowledgeId
	}
	return 0
}

func (x *KnowledgeLog) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *KnowledgeLog) GetOrganizationId() uint64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *KnowledgeLog) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *KnowledgeLog) GetScoreThreshold() float32 {
	if x != nil {
		return x.ScoreThreshold
	}
	return 0
}

func (x *KnowledgeLog) GetDocumentCount() uint32 {
	if x != nil {
		return x.DocumentCount
	}
	return 0
}

func (x *KnowledgeLog) GetAssetPrefix() string {
	if x != nil {
		return x.AssetPrefix
	}
	return ""
}

func (x *KnowledgeLog) GetRetrievalMethod() string {
	if x != nil {
		return x.RetrievalMethod
	}
	return ""
}

func (x *KnowledgeLog) GetTimeTaken() uint64 {
	if x != nil {
		return x.TimeTaken
	}
	return 0
}

func (x *KnowledgeLog) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

type KnowledgeDocumentSegment_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentHash        string `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	DocumentId          string `protobuf:"bytes,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	KnowledgeDocumentId uint64 `protobuf:"varint,3,opt,name=knowledge_document_id,json=knowledgeDocumentId,proto3" json:"knowledge_document_id,omitempty"`
	KnowledgeId         uint64 `protobuf:"varint,4,opt,name=knowledge_id,json=knowledgeId,proto3" json:"knowledge_id,omitempty"`
	ProjectId           uint64 `protobuf:"varint,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrganizationId      uint64 `protobuf:"varint,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	DocumentName        string `protobuf:"bytes,7,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
}

func (x *KnowledgeDocumentSegment_Metadata) Reset() {
	*x = KnowledgeDocumentSegment_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeDocumentSegment_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeDocumentSegment_Metadata) ProtoMessage() {}

func (x *KnowledgeDocumentSegment_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeDocumentSegment_Metadata.ProtoReflect.Descriptor instead.
func (*KnowledgeDocumentSegment_Metadata) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{12, 0}
}

func (x *KnowledgeDocumentSegment_Metadata) GetDocumentHash() string {
	if x != nil {
		return x.DocumentHash
	}
	return ""
}

func (x *KnowledgeDocumentSegment_Metadata) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *KnowledgeDocumentSegment_Metadata) GetKnowledgeDocumentId() uint64 {
	if x != nil {
		return x.KnowledgeDocumentId
	}
	return 0
}

func (x *KnowledgeDocumentSegment_Metadata) GetKnowledgeId() uint64 {
	if x != nil {
		return x.KnowledgeId
	}
	return 0
}

func (x *KnowledgeDocumentSegment_Metadata) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *KnowledgeDocumentSegment_Metadata) GetOrganizationId() uint64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *KnowledgeDocumentSegment_Metadata) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

type KnowledgeDocumentSegment_Entities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organizations []string `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
	Dates         []string `protobuf:"bytes,2,rep,name=dates,proto3" json:"dates,omitempty"`
	Products      []string `protobuf:"bytes,3,rep,name=products,proto3" json:"products,omitempty"`
	Events        []string `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	People        []string `protobuf:"bytes,5,rep,name=people,proto3" json:"people,omitempty"`
	Times         []string `protobuf:"bytes,6,rep,name=times,proto3" json:"times,omitempty"`
	Quantities    []string `protobuf:"bytes,7,rep,name=quantities,proto3" json:"quantities,omitempty"`
	Locations     []string `protobuf:"bytes,8,rep,name=locations,proto3" json:"locations,omitempty"`
	Industries    []string `protobuf:"bytes,9,rep,name=industries,proto3" json:"industries,omitempty"`
}

func (x *KnowledgeDocumentSegment_Entities) Reset() {
	*x = KnowledgeDocumentSegment_Entities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_knowledge_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KnowledgeDocumentSegment_Entities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeDocumentSegment_Entities) ProtoMessage() {}

func (x *KnowledgeDocumentSegment_Entities) ProtoReflect() protoreflect.Message {
	mi := &file_knowledge_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeDocumentSegment_Entities.ProtoReflect.Descriptor instead.
func (*KnowledgeDocumentSegment_Entities) Descriptor() ([]byte, []int) {
	return file_knowledge_api_proto_rawDescGZIP(), []int{12, 1}
}

func (x *KnowledgeDocumentSegment_Entities) GetOrganizations() []string {
	if x != nil {
		return x.Organizations
	}
	return nil
}

func (x *KnowledgeDocumentSegment_Entities) GetDates() []string {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *KnowledgeDocumentSegment_Entities) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *KnowledgeDocumentSegment_Entities) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *KnowledgeDocumentSegment_Entities) GetPeople() []string {
	if x != nil {
		return x.People
	}
	return nil
}

func (x *KnowledgeDocumentSegment_Entities) GetTimes() []string {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *KnowledgeDocumentSegment_Entities) GetQuantities() []string {
	if x != nil {
		return x.Quantities
	}
	return nil
}

func (x *KnowledgeDocumentSegment_Entities) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *KnowledgeDocumentSegment_Entities) GetIndustries() []string {
	if x != nil {
		return x.Industries
	}
	return nil
}

var File_knowledge_api_proto protoreflect.FileDescriptor

var file_knowledge_api_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd5, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x18, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x18, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x1e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x29, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x55, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0xa4, 0x06, 0x0a, 0x11, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x8b, 0x05, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x65, 0x0a,
	0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x52,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x28, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x0f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x4c,
	0x10, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xd6, 0x06, 0x0a, 0x18, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xa4, 0x02, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x15, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x13, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x86, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x28, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x1c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x02, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x75, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4e, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0xaf, 0x06, 0x0a,
	0x0c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x13, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x9e,
	0x0a, 0x0a, 0x10, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x25, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x12, 0x25, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x63, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x54, 0x61, 0x67, 0x12, 0x28, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x28, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67,
	0x12, 0x25, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65,
	0x78, 0x61, 0x74, 0x69, 0x63, 0x2f, 0x77, 0x65, 0x62, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x65, 0x78, 0x61, 0x74, 0x69, 0x63,
	0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_knowledge_api_proto_rawDescOnce sync.Once
	file_knowledge_api_proto_rawDescData = file_knowledge_api_proto_rawDesc
)

func file_knowledge_api_proto_rawDescGZIP() []byte {
	file_knowledge_api_proto_rawDescOnce.Do(func() {
		file_knowledge_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_knowledge_api_proto_rawDescData)
	})
	return file_knowledge_api_proto_rawDescData
}

var file_knowledge_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_knowledge_api_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_knowledge_api_proto_goTypes = []any{
	(CreateKnowledgeDocumentRequest_PRE_PROCESS)(0),     // 0: knowledge_api.CreateKnowledgeDocumentRequest.PRE_PROCESS
	(CreateKnowledgeDocumentRequest_DOCUMENT_SOURCE)(0), // 1: knowledge_api.CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE
	(*CreateKnowledgeRequest)(nil),                      // 2: knowledge_api.CreateKnowledgeRequest
	(*CreateKnowledgeResponse)(nil),                     // 3: knowledge_api.CreateKnowledgeResponse
	(*GetAllKnowledgeRequest)(nil),                      // 4: knowledge_api.GetAllKnowledgeRequest
	(*GetAllKnowledgeResponse)(nil),                     // 5: knowledge_api.GetAllKnowledgeResponse
	(*GetKnowledgeRequest)(nil),                         // 6: knowledge_api.GetKnowledgeRequest
	(*GetKnowledgeResponse)(nil),                        // 7: knowledge_api.GetKnowledgeResponse
	(*CreateKnowledgeTagRequest)(nil),                   // 8: knowledge_api.CreateKnowledgeTagRequest
	(*KnowledgeDocument)(nil),                           // 9: knowledge_api.KnowledgeDocument
	(*GetAllKnowledgeDocumentRequest)(nil),              // 10: knowledge_api.GetAllKnowledgeDocumentRequest
	(*GetAllKnowledgeDocumentResponse)(nil),             // 11: knowledge_api.GetAllKnowledgeDocumentResponse
	(*CreateKnowledgeDocumentRequest)(nil),              // 12: knowledge_api.CreateKnowledgeDocumentRequest
	(*CreateKnowledgeDocumentResponse)(nil),             // 13: knowledge_api.CreateKnowledgeDocumentResponse
	(*KnowledgeDocumentSegment)(nil),                    // 14: knowledge_api.KnowledgeDocumentSegment
	(*GetAllKnowledgeDocumentSegmentRequest)(nil),       // 15: knowledge_api.GetAllKnowledgeDocumentSegmentRequest
	(*GetAllKnowledgeDocumentSegmentResponse)(nil),      // 16: knowledge_api.GetAllKnowledgeDocumentSegmentResponse
	(*UpdateKnowledgeDetailRequest)(nil),                // 17: knowledge_api.UpdateKnowledgeDetailRequest
	(*UpdateKnowledgeDocumentSegmentRequest)(nil),       // 18: knowledge_api.UpdateKnowledgeDocumentSegmentRequest
	(*DeleteKnowledgeDocumentSegmentRequest)(nil),       // 19: knowledge_api.DeleteKnowledgeDocumentSegmentRequest
	(*GetAllKnowledgeLogRequest)(nil),                   // 20: knowledge_api.GetAllKnowledgeLogRequest
	(*GetKnowledgeLogRequest)(nil),                      // 21: knowledge_api.GetKnowledgeLogRequest
	(*GetKnowledgeLogResponse)(nil),                     // 22: knowledge_api.GetKnowledgeLogResponse
	(*GetAllKnowledgeLogResponse)(nil),                  // 23: knowledge_api.GetAllKnowledgeLogResponse
	(*KnowledgeLog)(nil),                                // 24: knowledge_api.KnowledgeLog
	(*KnowledgeDocumentSegment_Metadata)(nil),           // 25: knowledge_api.KnowledgeDocumentSegment.Metadata
	(*KnowledgeDocumentSegment_Entities)(nil),           // 26: knowledge_api.KnowledgeDocumentSegment.Entities
	nil,                           // 27: knowledge_api.KnowledgeLog.AdditionalDataEntry
	(*Metadata)(nil),              // 28: Metadata
	(*Knowledge)(nil),             // 29: Knowledge
	(*Error)(nil),                 // 30: Error
	(*Paginate)(nil),              // 31: Paginate
	(*Criteria)(nil),              // 32: Criteria
	(*Paginated)(nil),             // 33: Paginated
	(*structpb.Struct)(nil),       // 34: google.protobuf.Struct
	(*User)(nil),                  // 35: User
	(*timestamppb.Timestamp)(nil), // 36: google.protobuf.Timestamp
	(*Content)(nil),               // 37: Content
	(*Ordering)(nil),              // 38: Ordering
	(*BaseResponse)(nil),          // 39: BaseResponse
}
var file_knowledge_api_proto_depIdxs = []int32{
	28, // 0: knowledge_api.CreateKnowledgeRequest.knowledgeEmbeddingModelOptions:type_name -> Metadata
	29, // 1: knowledge_api.CreateKnowledgeResponse.data:type_name -> Knowledge
	30, // 2: knowledge_api.CreateKnowledgeResponse.error:type_name -> Error
	31, // 3: knowledge_api.GetAllKnowledgeRequest.paginate:type_name -> Paginate
	32, // 4: knowledge_api.GetAllKnowledgeRequest.criterias:type_name -> Criteria
	29, // 5: knowledge_api.GetAllKnowledgeResponse.data:type_name -> Knowledge
	30, // 6: knowledge_api.GetAllKnowledgeResponse.error:type_name -> Error
	33, // 7: knowledge_api.GetAllKnowledgeResponse.paginated:type_name -> Paginated
	29, // 8: knowledge_api.GetKnowledgeResponse.data:type_name -> Knowledge
	30, // 9: knowledge_api.GetKnowledgeResponse.error:type_name -> Error
	34, // 10: knowledge_api.KnowledgeDocument.documentSource:type_name -> google.protobuf.Struct
	35, // 11: knowledge_api.KnowledgeDocument.createdUser:type_name -> User
	35, // 12: knowledge_api.KnowledgeDocument.updatedUser:type_name -> User
	36, // 13: knowledge_api.KnowledgeDocument.createdDate:type_name -> google.protobuf.Timestamp
	36, // 14: knowledge_api.KnowledgeDocument.updatedDate:type_name -> google.protobuf.Timestamp
	31, // 15: knowledge_api.GetAllKnowledgeDocumentRequest.paginate:type_name -> Paginate
	32, // 16: knowledge_api.GetAllKnowledgeDocumentRequest.criterias:type_name -> Criteria
	9,  // 17: knowledge_api.GetAllKnowledgeDocumentResponse.data:type_name -> knowledge_api.KnowledgeDocument
	30, // 18: knowledge_api.GetAllKnowledgeDocumentResponse.error:type_name -> Error
	33, // 19: knowledge_api.GetAllKnowledgeDocumentResponse.paginated:type_name -> Paginated
	1,  // 20: knowledge_api.CreateKnowledgeDocumentRequest.documentSource:type_name -> knowledge_api.CreateKnowledgeDocumentRequest.DOCUMENT_SOURCE
	37, // 21: knowledge_api.CreateKnowledgeDocumentRequest.contents:type_name -> Content
	0,  // 22: knowledge_api.CreateKnowledgeDocumentRequest.preProcess:type_name -> knowledge_api.CreateKnowledgeDocumentRequest.PRE_PROCESS
	9,  // 23: knowledge_api.CreateKnowledgeDocumentResponse.data:type_name -> knowledge_api.KnowledgeDocument
	30, // 24: knowledge_api.CreateKnowledgeDocumentResponse.error:type_name -> Error
	33, // 25: knowledge_api.CreateKnowledgeDocumentResponse.paginated:type_name -> Paginated
	25, // 26: knowledge_api.KnowledgeDocumentSegment.metadata:type_name -> knowledge_api.KnowledgeDocumentSegment.Metadata
	26, // 27: knowledge_api.KnowledgeDocumentSegment.entities:type_name -> knowledge_api.KnowledgeDocumentSegment.Entities
	31, // 28: knowledge_api.GetAllKnowledgeDocumentSegmentRequest.paginate:type_name -> Paginate
	32, // 29: knowledge_api.GetAllKnowledgeDocumentSegmentRequest.criterias:type_name -> Criteria
	14, // 30: knowledge_api.GetAllKnowledgeDocumentSegmentResponse.data:type_name -> knowledge_api.KnowledgeDocumentSegment
	30, // 31: knowledge_api.GetAllKnowledgeDocumentSegmentResponse.error:type_name -> Error
	33, // 32: knowledge_api.GetAllKnowledgeDocumentSegmentResponse.paginated:type_name -> Paginated
	31, // 33: knowledge_api.GetAllKnowledgeLogRequest.paginate:type_name -> Paginate
	32, // 34: knowledge_api.GetAllKnowledgeLogRequest.criterias:type_name -> Criteria
	38, // 35: knowledge_api.GetAllKnowledgeLogRequest.order:type_name -> Ordering
	24, // 36: knowledge_api.GetKnowledgeLogResponse.data:type_name -> knowledge_api.KnowledgeLog
	30, // 37: knowledge_api.GetKnowledgeLogResponse.error:type_name -> Error
	24, // 38: knowledge_api.GetAllKnowledgeLogResponse.data:type_name -> knowledge_api.KnowledgeLog
	30, // 39: knowledge_api.GetAllKnowledgeLogResponse.error:type_name -> Error
	33, // 40: knowledge_api.GetAllKnowledgeLogResponse.paginated:type_name -> Paginated
	34, // 41: knowledge_api.KnowledgeLog.action:type_name -> google.protobuf.Struct
	34, // 42: knowledge_api.KnowledgeLog.request:type_name -> google.protobuf.Struct
	34, // 43: knowledge_api.KnowledgeLog.response:type_name -> google.protobuf.Struct
	36, // 44: knowledge_api.KnowledgeLog.createdDate:type_name -> google.protobuf.Timestamp
	36, // 45: knowledge_api.KnowledgeLog.updatedDate:type_name -> google.protobuf.Timestamp
	27, // 46: knowledge_api.KnowledgeLog.additionalData:type_name -> knowledge_api.KnowledgeLog.AdditionalDataEntry
	6,  // 47: knowledge_api.KnowledgeService.GetKnowledge:input_type -> knowledge_api.GetKnowledgeRequest
	4,  // 48: knowledge_api.KnowledgeService.GetAllKnowledge:input_type -> knowledge_api.GetAllKnowledgeRequest
	2,  // 49: knowledge_api.KnowledgeService.CreateKnowledge:input_type -> knowledge_api.CreateKnowledgeRequest
	8,  // 50: knowledge_api.KnowledgeService.CreateKnowledgeTag:input_type -> knowledge_api.CreateKnowledgeTagRequest
	12, // 51: knowledge_api.KnowledgeService.CreateKnowledgeDocument:input_type -> knowledge_api.CreateKnowledgeDocumentRequest
	10, // 52: knowledge_api.KnowledgeService.GetAllKnowledgeDocument:input_type -> knowledge_api.GetAllKnowledgeDocumentRequest
	15, // 53: knowledge_api.KnowledgeService.GetAllKnowledgeDocumentSegment:input_type -> knowledge_api.GetAllKnowledgeDocumentSegmentRequest
	17, // 54: knowledge_api.KnowledgeService.UpdateKnowledgeDetail:input_type -> knowledge_api.UpdateKnowledgeDetailRequest
	18, // 55: knowledge_api.KnowledgeService.UpdateKnowledgeDocumentSegment:input_type -> knowledge_api.UpdateKnowledgeDocumentSegmentRequest
	19, // 56: knowledge_api.KnowledgeService.DeleteKnowledgeDocumentSegment:input_type -> knowledge_api.DeleteKnowledgeDocumentSegmentRequest
	20, // 57: knowledge_api.KnowledgeService.GetAllKnowledgeLog:input_type -> knowledge_api.GetAllKnowledgeLogRequest
	21, // 58: knowledge_api.KnowledgeService.GetKnowledgeLog:input_type -> knowledge_api.GetKnowledgeLogRequest
	7,  // 59: knowledge_api.KnowledgeService.GetKnowledge:output_type -> knowledge_api.GetKnowledgeResponse
	5,  // 60: knowledge_api.KnowledgeService.GetAllKnowledge:output_type -> knowledge_api.GetAllKnowledgeResponse
	3,  // 61: knowledge_api.KnowledgeService.CreateKnowledge:output_type -> knowledge_api.CreateKnowledgeResponse
	7,  // 62: knowledge_api.KnowledgeService.CreateKnowledgeTag:output_type -> knowledge_api.GetKnowledgeResponse
	13, // 63: knowledge_api.KnowledgeService.CreateKnowledgeDocument:output_type -> knowledge_api.CreateKnowledgeDocumentResponse
	11, // 64: knowledge_api.KnowledgeService.GetAllKnowledgeDocument:output_type -> knowledge_api.GetAllKnowledgeDocumentResponse
	16, // 65: knowledge_api.KnowledgeService.GetAllKnowledgeDocumentSegment:output_type -> knowledge_api.GetAllKnowledgeDocumentSegmentResponse
	7,  // 66: knowledge_api.KnowledgeService.UpdateKnowledgeDetail:output_type -> knowledge_api.GetKnowledgeResponse
	39, // 67: knowledge_api.KnowledgeService.UpdateKnowledgeDocumentSegment:output_type -> BaseResponse
	39, // 68: knowledge_api.KnowledgeService.DeleteKnowledgeDocumentSegment:output_type -> BaseResponse
	23, // 69: knowledge_api.KnowledgeService.GetAllKnowledgeLog:output_type -> knowledge_api.GetAllKnowledgeLogResponse
	22, // 70: knowledge_api.KnowledgeService.GetKnowledgeLog:output_type -> knowledge_api.GetKnowledgeLogResponse
	59, // [59:71] is the sub-list for method output_type
	47, // [47:59] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_knowledge_api_proto_init() }
func file_knowledge_api_proto_init() {
	if File_knowledge_api_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_knowledge_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKnowledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKnowledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllKnowledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllKnowledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetKnowledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetKnowledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKnowledgeTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*KnowledgeDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllKnowledgeDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllKnowledgeDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKnowledgeDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CreateKnowledgeDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*KnowledgeDocumentSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllKnowledgeDocumentSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllKnowledgeDocumentSegmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateKnowledgeDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateKnowledgeDocumentSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteKnowledgeDocumentSegmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllKnowledgeLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetKnowledgeLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetKnowledgeLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllKnowledgeLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*KnowledgeLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*KnowledgeDocumentSegment_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_knowledge_api_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*KnowledgeDocumentSegment_Entities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_knowledge_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_knowledge_api_proto_goTypes,
		DependencyIndexes: file_knowledge_api_proto_depIdxs,
		EnumInfos:         file_knowledge_api_proto_enumTypes,
		MessageInfos:      file_knowledge_api_proto_msgTypes,
	}.Build()
	File_knowledge_api_proto = out.File
	file_knowledge_api_proto_rawDesc = nil
	file_knowledge_api_proto_goTypes = nil
	file_knowledge_api_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: endpoint-api.proto

package lexatic_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EndpointService_GetEndpoint_FullMethodName                      = "/endpoint_api.EndpointService/GetEndpoint"
	EndpointService_GetAllEndpoint_FullMethodName                   = "/endpoint_api.EndpointService/GetAllEndpoint"
	EndpointService_GetAllEndpointProviderModel_FullMethodName      = "/endpoint_api.EndpointService/GetAllEndpointProviderModel"
	EndpointService_UpdateEndpointVersion_FullMethodName            = "/endpoint_api.EndpointService/UpdateEndpointVersion"
	EndpointService_CreateEndpoint_FullMethodName                   = "/endpoint_api.EndpointService/CreateEndpoint"
	EndpointService_CreateEndpointProviderModel_FullMethodName      = "/endpoint_api.EndpointService/CreateEndpointProviderModel"
	EndpointService_CreateEndpointCacheConfiguration_FullMethodName = "/endpoint_api.EndpointService/CreateEndpointCacheConfiguration"
	EndpointService_CreateEndpointRetryConfiguration_FullMethodName = "/endpoint_api.EndpointService/CreateEndpointRetryConfiguration"
	EndpointService_CreateEndpointTag_FullMethodName                = "/endpoint_api.EndpointService/CreateEndpointTag"
	EndpointService_ForkEndpoint_FullMethodName                     = "/endpoint_api.EndpointService/ForkEndpoint"
	EndpointService_UpdateEndpointDetail_FullMethodName             = "/endpoint_api.EndpointService/UpdateEndpointDetail"
	EndpointService_GetAllEndpointLog_FullMethodName                = "/endpoint_api.EndpointService/GetAllEndpointLog"
	EndpointService_GetEndpointLog_FullMethodName                   = "/endpoint_api.EndpointService/GetEndpointLog"
)

// EndpointServiceClient is the client API for EndpointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointServiceClient interface {
	GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*GetEndpointResponse, error)
	GetAllEndpoint(ctx context.Context, in *GetAllEndpointRequest, opts ...grpc.CallOption) (*GetAllEndpointResponse, error)
	GetAllEndpointProviderModel(ctx context.Context, in *GetAllEndpointProviderModelRequest, opts ...grpc.CallOption) (*GetAllEndpointProviderModelResponse, error)
	UpdateEndpointVersion(ctx context.Context, in *UpdateEndpointVersionRequest, opts ...grpc.CallOption) (*UpdateEndpointVersionResponse, error)
	CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*CreateEndpointResponse, error)
	CreateEndpointProviderModel(ctx context.Context, in *CreateEndpointProviderModelRequest, opts ...grpc.CallOption) (*CreateEndpointProviderModelResponse, error)
	// next gen
	CreateEndpointCacheConfiguration(ctx context.Context, in *CreateEndpointCacheConfigurationRequest, opts ...grpc.CallOption) (*CreateEndpointCacheConfigurationResponse, error)
	CreateEndpointRetryConfiguration(ctx context.Context, in *CreateEndpointRetryConfigurationRequest, opts ...grpc.CallOption) (*CreateEndpointRetryConfigurationResponse, error)
	CreateEndpointTag(ctx context.Context, in *CreateEndpointTagRequest, opts ...grpc.CallOption) (*GetEndpointResponse, error)
	ForkEndpoint(ctx context.Context, in *ForkEndpointRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	UpdateEndpointDetail(ctx context.Context, in *UpdateEndpointDetailRequest, opts ...grpc.CallOption) (*GetEndpointResponse, error)
	GetAllEndpointLog(ctx context.Context, in *GetAllEndpointLogRequest, opts ...grpc.CallOption) (*GetAllEndpointLogResponse, error)
	GetEndpointLog(ctx context.Context, in *GetEndpointLogRequest, opts ...grpc.CallOption) (*GetEndpointLogResponse, error)
}

type endpointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointServiceClient(cc grpc.ClientConnInterface) EndpointServiceClient {
	return &endpointServiceClient{cc}
}

func (c *endpointServiceClient) GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*GetEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEndpointResponse)
	err := c.cc.Invoke(ctx, EndpointService_GetEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) GetAllEndpoint(ctx context.Context, in *GetAllEndpointRequest, opts ...grpc.CallOption) (*GetAllEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllEndpointResponse)
	err := c.cc.Invoke(ctx, EndpointService_GetAllEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) GetAllEndpointProviderModel(ctx context.Context, in *GetAllEndpointProviderModelRequest, opts ...grpc.CallOption) (*GetAllEndpointProviderModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllEndpointProviderModelResponse)
	err := c.cc.Invoke(ctx, EndpointService_GetAllEndpointProviderModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) UpdateEndpointVersion(ctx context.Context, in *UpdateEndpointVersionRequest, opts ...grpc.CallOption) (*UpdateEndpointVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEndpointVersionResponse)
	err := c.cc.Invoke(ctx, EndpointService_UpdateEndpointVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*CreateEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEndpointResponse)
	err := c.cc.Invoke(ctx, EndpointService_CreateEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) CreateEndpointProviderModel(ctx context.Context, in *CreateEndpointProviderModelRequest, opts ...grpc.CallOption) (*CreateEndpointProviderModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEndpointProviderModelResponse)
	err := c.cc.Invoke(ctx, EndpointService_CreateEndpointProviderModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) CreateEndpointCacheConfiguration(ctx context.Context, in *CreateEndpointCacheConfigurationRequest, opts ...grpc.CallOption) (*CreateEndpointCacheConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEndpointCacheConfigurationResponse)
	err := c.cc.Invoke(ctx, EndpointService_CreateEndpointCacheConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) CreateEndpointRetryConfiguration(ctx context.Context, in *CreateEndpointRetryConfigurationRequest, opts ...grpc.CallOption) (*CreateEndpointRetryConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEndpointRetryConfigurationResponse)
	err := c.cc.Invoke(ctx, EndpointService_CreateEndpointRetryConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) CreateEndpointTag(ctx context.Context, in *CreateEndpointTagRequest, opts ...grpc.CallOption) (*GetEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEndpointResponse)
	err := c.cc.Invoke(ctx, EndpointService_CreateEndpointTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) ForkEndpoint(ctx context.Context, in *ForkEndpointRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, EndpointService_ForkEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) UpdateEndpointDetail(ctx context.Context, in *UpdateEndpointDetailRequest, opts ...grpc.CallOption) (*GetEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEndpointResponse)
	err := c.cc.Invoke(ctx, EndpointService_UpdateEndpointDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) GetAllEndpointLog(ctx context.Context, in *GetAllEndpointLogRequest, opts ...grpc.CallOption) (*GetAllEndpointLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllEndpointLogResponse)
	err := c.cc.Invoke(ctx, EndpointService_GetAllEndpointLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) GetEndpointLog(ctx context.Context, in *GetEndpointLogRequest, opts ...grpc.CallOption) (*GetEndpointLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEndpointLogResponse)
	err := c.cc.Invoke(ctx, EndpointService_GetEndpointLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointServiceServer is the server API for EndpointService service.
// All implementations should embed UnimplementedEndpointServiceServer
// for forward compatibility.
type EndpointServiceServer interface {
	GetEndpoint(context.Context, *GetEndpointRequest) (*GetEndpointResponse, error)
	GetAllEndpoint(context.Context, *GetAllEndpointRequest) (*GetAllEndpointResponse, error)
	GetAllEndpointProviderModel(context.Context, *GetAllEndpointProviderModelRequest) (*GetAllEndpointProviderModelResponse, error)
	UpdateEndpointVersion(context.Context, *UpdateEndpointVersionRequest) (*UpdateEndpointVersionResponse, error)
	CreateEndpoint(context.Context, *CreateEndpointRequest) (*CreateEndpointResponse, error)
	CreateEndpointProviderModel(context.Context, *CreateEndpointProviderModelRequest) (*CreateEndpointProviderModelResponse, error)
	// next gen
	CreateEndpointCacheConfiguration(context.Context, *CreateEndpointCacheConfigurationRequest) (*CreateEndpointCacheConfigurationResponse, error)
	CreateEndpointRetryConfiguration(context.Context, *CreateEndpointRetryConfigurationRequest) (*CreateEndpointRetryConfigurationResponse, error)
	CreateEndpointTag(context.Context, *CreateEndpointTagRequest) (*GetEndpointResponse, error)
	ForkEndpoint(context.Context, *ForkEndpointRequest) (*BaseResponse, error)
	UpdateEndpointDetail(context.Context, *UpdateEndpointDetailRequest) (*GetEndpointResponse, error)
	GetAllEndpointLog(context.Context, *GetAllEndpointLogRequest) (*GetAllEndpointLogResponse, error)
	GetEndpointLog(context.Context, *GetEndpointLogRequest) (*GetEndpointLogResponse, error)
}

// UnimplementedEndpointServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEndpointServiceServer struct{}

func (UnimplementedEndpointServiceServer) GetEndpoint(context.Context, *GetEndpointRequest) (*GetEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpoint not implemented")
}
func (UnimplementedEndpointServiceServer) GetAllEndpoint(context.Context, *GetAllEndpointRequest) (*GetAllEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEndpoint not implemented")
}
func (UnimplementedEndpointServiceServer) GetAllEndpointProviderModel(context.Context, *GetAllEndpointProviderModelRequest) (*GetAllEndpointProviderModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEndpointProviderModel not implemented")
}
func (UnimplementedEndpointServiceServer) UpdateEndpointVersion(context.Context, *UpdateEndpointVersionRequest) (*UpdateEndpointVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpointVersion not implemented")
}
func (UnimplementedEndpointServiceServer) CreateEndpoint(context.Context, *CreateEndpointRequest) (*CreateEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpoint not implemented")
}
func (UnimplementedEndpointServiceServer) CreateEndpointProviderModel(context.Context, *CreateEndpointProviderModelRequest) (*CreateEndpointProviderModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointProviderModel not implemented")
}
func (UnimplementedEndpointServiceServer) CreateEndpointCacheConfiguration(context.Context, *CreateEndpointCacheConfigurationRequest) (*CreateEndpointCacheConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointCacheConfiguration not implemented")
}
func (UnimplementedEndpointServiceServer) CreateEndpointRetryConfiguration(context.Context, *CreateEndpointRetryConfigurationRequest) (*CreateEndpointRetryConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointRetryConfiguration not implemented")
}
func (UnimplementedEndpointServiceServer) CreateEndpointTag(context.Context, *CreateEndpointTagRequest) (*GetEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointTag not implemented")
}
func (UnimplementedEndpointServiceServer) ForkEndpoint(context.Context, *ForkEndpointRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForkEndpoint not implemented")
}
func (UnimplementedEndpointServiceServer) UpdateEndpointDetail(context.Context, *UpdateEndpointDetailRequest) (*GetEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpointDetail not implemented")
}
func (UnimplementedEndpointServiceServer) GetAllEndpointLog(context.Context, *GetAllEndpointLogRequest) (*GetAllEndpointLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEndpointLog not implemented")
}
func (UnimplementedEndpointServiceServer) GetEndpointLog(context.Context, *GetEndpointLogRequest) (*GetEndpointLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointLog not implemented")
}
func (UnimplementedEndpointServiceServer) testEmbeddedByValue() {}

// UnsafeEndpointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServiceServer will
// result in compilation errors.
type UnsafeEndpointServiceServer interface {
	mustEmbedUnimplementedEndpointServiceServer()
}

func RegisterEndpointServiceServer(s grpc.ServiceRegistrar, srv EndpointServiceServer) {
	// If the following call pancis, it indicates UnimplementedEndpointServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EndpointService_ServiceDesc, srv)
}

func _EndpointService_GetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).GetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_GetEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).GetEndpoint(ctx, req.(*GetEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_GetAllEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).GetAllEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_GetAllEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).GetAllEndpoint(ctx, req.(*GetAllEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_GetAllEndpointProviderModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEndpointProviderModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).GetAllEndpointProviderModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_GetAllEndpointProviderModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).GetAllEndpointProviderModel(ctx, req.(*GetAllEndpointProviderModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_UpdateEndpointVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).UpdateEndpointVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_UpdateEndpointVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).UpdateEndpointVersion(ctx, req.(*UpdateEndpointVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_CreateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).CreateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_CreateEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).CreateEndpoint(ctx, req.(*CreateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_CreateEndpointProviderModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointProviderModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).CreateEndpointProviderModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_CreateEndpointProviderModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).CreateEndpointProviderModel(ctx, req.(*CreateEndpointProviderModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_CreateEndpointCacheConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointCacheConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).CreateEndpointCacheConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_CreateEndpointCacheConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).CreateEndpointCacheConfiguration(ctx, req.(*CreateEndpointCacheConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_CreateEndpointRetryConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointRetryConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).CreateEndpointRetryConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_CreateEndpointRetryConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).CreateEndpointRetryConfiguration(ctx, req.(*CreateEndpointRetryConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_CreateEndpointTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).CreateEndpointTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_CreateEndpointTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).CreateEndpointTag(ctx, req.(*CreateEndpointTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_ForkEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).ForkEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_ForkEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).ForkEndpoint(ctx, req.(*ForkEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_UpdateEndpointDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).UpdateEndpointDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_UpdateEndpointDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).UpdateEndpointDetail(ctx, req.(*UpdateEndpointDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_GetAllEndpointLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEndpointLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).GetAllEndpointLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_GetAllEndpointLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).GetAllEndpointLog(ctx, req.(*GetAllEndpointLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_GetEndpointLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).GetEndpointLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_GetEndpointLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).GetEndpointLog(ctx, req.(*GetEndpointLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EndpointService_ServiceDesc is the grpc.ServiceDesc for EndpointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndpointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endpoint_api.EndpointService",
	HandlerType: (*EndpointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEndpoint",
			Handler:    _EndpointService_GetEndpoint_Handler,
		},
		{
			MethodName: "GetAllEndpoint",
			Handler:    _EndpointService_GetAllEndpoint_Handler,
		},
		{
			MethodName: "GetAllEndpointProviderModel",
			Handler:    _EndpointService_GetAllEndpointProviderModel_Handler,
		},
		{
			MethodName: "UpdateEndpointVersion",
			Handler:    _EndpointService_UpdateEndpointVersion_Handler,
		},
		{
			MethodName: "CreateEndpoint",
			Handler:    _EndpointService_CreateEndpoint_Handler,
		},
		{
			MethodName: "CreateEndpointProviderModel",
			Handler:    _EndpointService_CreateEndpointProviderModel_Handler,
		},
		{
			MethodName: "CreateEndpointCacheConfiguration",
			Handler:    _EndpointService_CreateEndpointCacheConfiguration_Handler,
		},
		{
			MethodName: "CreateEndpointRetryConfiguration",
			Handler:    _EndpointService_CreateEndpointRetryConfiguration_Handler,
		},
		{
			MethodName: "CreateEndpointTag",
			Handler:    _EndpointService_CreateEndpointTag_Handler,
		},
		{
			MethodName: "ForkEndpoint",
			Handler:    _EndpointService_ForkEndpoint_Handler,
		},
		{
			MethodName: "UpdateEndpointDetail",
			Handler:    _EndpointService_UpdateEndpointDetail_Handler,
		},
		{
			MethodName: "GetAllEndpointLog",
			Handler:    _EndpointService_GetAllEndpointLog_Handler,
		},
		{
			MethodName: "GetEndpointLog",
			Handler:    _EndpointService_GetEndpointLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "endpoint-api.proto",
}
